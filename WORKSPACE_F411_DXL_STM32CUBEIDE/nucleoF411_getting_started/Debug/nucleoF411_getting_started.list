
nucleoF411_getting_started.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056cc  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08005864  08005864  00006864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005b04  08005b04  00006b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005b0c  08005b0c  00006b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005b10  08005b10  00006b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000020  20000000  08005b14  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003b8  20000020  08005b34  00007020  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003d8  08005b34  000073d8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000feec  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029c0  00000000  00000000  00016f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010b8  00000000  00000000  00019900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ce9  00000000  00000000  0001a9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007312  00000000  00000000  0001b6a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019aa1  00000000  00000000  000229b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000aa3a4  00000000  00000000  0003c454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  000e67f8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004790  00000000  00000000  000e683c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000081  00000000  00000000  000eafcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800584c 	.word	0x0800584c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	0800584c 	.word	0x0800584c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b96a 	b.w	8000d00 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	460c      	mov	r4, r1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d14e      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a50:	4694      	mov	ip, r2
 8000a52:	458c      	cmp	ip, r1
 8000a54:	4686      	mov	lr, r0
 8000a56:	fab2 f282 	clz	r2, r2
 8000a5a:	d962      	bls.n	8000b22 <__udivmoddi4+0xde>
 8000a5c:	b14a      	cbz	r2, 8000a72 <__udivmoddi4+0x2e>
 8000a5e:	f1c2 0320 	rsb	r3, r2, #32
 8000a62:	4091      	lsls	r1, r2
 8000a64:	fa20 f303 	lsr.w	r3, r0, r3
 8000a68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6c:	4319      	orrs	r1, r3
 8000a6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a76:	fa1f f68c 	uxth.w	r6, ip
 8000a7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a82:	fb07 1114 	mls	r1, r7, r4, r1
 8000a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a8a:	fb04 f106 	mul.w	r1, r4, r6
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a9a:	f080 8112 	bcs.w	8000cc2 <__udivmoddi4+0x27e>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 810f 	bls.w	8000cc2 <__udivmoddi4+0x27e>
 8000aa4:	3c02      	subs	r4, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a59      	subs	r1, r3, r1
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb00 f606 	mul.w	r6, r0, r6
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x94>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aca:	f080 80fc 	bcs.w	8000cc6 <__udivmoddi4+0x282>
 8000ace:	429e      	cmp	r6, r3
 8000ad0:	f240 80f9 	bls.w	8000cc6 <__udivmoddi4+0x282>
 8000ad4:	4463      	add	r3, ip
 8000ad6:	3802      	subs	r0, #2
 8000ad8:	1b9b      	subs	r3, r3, r6
 8000ada:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ade:	2100      	movs	r1, #0
 8000ae0:	b11d      	cbz	r5, 8000aea <__udivmoddi4+0xa6>
 8000ae2:	40d3      	lsrs	r3, r2
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	e9c5 3200 	strd	r3, r2, [r5]
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d905      	bls.n	8000afe <__udivmoddi4+0xba>
 8000af2:	b10d      	cbz	r5, 8000af8 <__udivmoddi4+0xb4>
 8000af4:	e9c5 0100 	strd	r0, r1, [r5]
 8000af8:	2100      	movs	r1, #0
 8000afa:	4608      	mov	r0, r1
 8000afc:	e7f5      	b.n	8000aea <__udivmoddi4+0xa6>
 8000afe:	fab3 f183 	clz	r1, r3
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d146      	bne.n	8000b94 <__udivmoddi4+0x150>
 8000b06:	42a3      	cmp	r3, r4
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xcc>
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	f0c0 80f0 	bcc.w	8000cf0 <__udivmoddi4+0x2ac>
 8000b10:	1a86      	subs	r6, r0, r2
 8000b12:	eb64 0303 	sbc.w	r3, r4, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d0e6      	beq.n	8000aea <__udivmoddi4+0xa6>
 8000b1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b20:	e7e3      	b.n	8000aea <__udivmoddi4+0xa6>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	f040 8090 	bne.w	8000c48 <__udivmoddi4+0x204>
 8000b28:	eba1 040c 	sub.w	r4, r1, ip
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	fa1f f78c 	uxth.w	r7, ip
 8000b34:	2101      	movs	r1, #1
 8000b36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b46:	fb07 f006 	mul.w	r0, r7, r6
 8000b4a:	4298      	cmp	r0, r3
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x11c>
 8000b4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x11a>
 8000b58:	4298      	cmp	r0, r3
 8000b5a:	f200 80cd 	bhi.w	8000cf8 <__udivmoddi4+0x2b4>
 8000b5e:	4626      	mov	r6, r4
 8000b60:	1a1c      	subs	r4, r3, r0
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b72:	fb00 f707 	mul.w	r7, r0, r7
 8000b76:	429f      	cmp	r7, r3
 8000b78:	d908      	bls.n	8000b8c <__udivmoddi4+0x148>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b82:	d202      	bcs.n	8000b8a <__udivmoddi4+0x146>
 8000b84:	429f      	cmp	r7, r3
 8000b86:	f200 80b0 	bhi.w	8000cea <__udivmoddi4+0x2a6>
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	1bdb      	subs	r3, r3, r7
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	e7a5      	b.n	8000ae0 <__udivmoddi4+0x9c>
 8000b94:	f1c1 0620 	rsb	r6, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b9e:	431f      	orrs	r7, r3
 8000ba0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ba4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ba8:	ea43 030c 	orr.w	r3, r3, ip
 8000bac:	40f4      	lsrs	r4, r6
 8000bae:	fa00 f801 	lsl.w	r8, r0, r1
 8000bb2:	0c38      	lsrs	r0, r7, #16
 8000bb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bcc:	45a1      	cmp	r9, r4
 8000bce:	fa02 f201 	lsl.w	r2, r2, r1
 8000bd2:	d90a      	bls.n	8000bea <__udivmoddi4+0x1a6>
 8000bd4:	193c      	adds	r4, r7, r4
 8000bd6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bda:	f080 8084 	bcs.w	8000ce6 <__udivmoddi4+0x2a2>
 8000bde:	45a1      	cmp	r9, r4
 8000be0:	f240 8081 	bls.w	8000ce6 <__udivmoddi4+0x2a2>
 8000be4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000be8:	443c      	add	r4, r7
 8000bea:	eba4 0409 	sub.w	r4, r4, r9
 8000bee:	fa1f f983 	uxth.w	r9, r3
 8000bf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bf6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c02:	45a4      	cmp	ip, r4
 8000c04:	d907      	bls.n	8000c16 <__udivmoddi4+0x1d2>
 8000c06:	193c      	adds	r4, r7, r4
 8000c08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c0c:	d267      	bcs.n	8000cde <__udivmoddi4+0x29a>
 8000c0e:	45a4      	cmp	ip, r4
 8000c10:	d965      	bls.n	8000cde <__udivmoddi4+0x29a>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	443c      	add	r4, r7
 8000c16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c1e:	eba4 040c 	sub.w	r4, r4, ip
 8000c22:	429c      	cmp	r4, r3
 8000c24:	46ce      	mov	lr, r9
 8000c26:	469c      	mov	ip, r3
 8000c28:	d351      	bcc.n	8000cce <__udivmoddi4+0x28a>
 8000c2a:	d04e      	beq.n	8000cca <__udivmoddi4+0x286>
 8000c2c:	b155      	cbz	r5, 8000c44 <__udivmoddi4+0x200>
 8000c2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c32:	eb64 040c 	sbc.w	r4, r4, ip
 8000c36:	fa04 f606 	lsl.w	r6, r4, r6
 8000c3a:	40cb      	lsrs	r3, r1
 8000c3c:	431e      	orrs	r6, r3
 8000c3e:	40cc      	lsrs	r4, r1
 8000c40:	e9c5 6400 	strd	r6, r4, [r5]
 8000c44:	2100      	movs	r1, #0
 8000c46:	e750      	b.n	8000aea <__udivmoddi4+0xa6>
 8000c48:	f1c2 0320 	rsb	r3, r2, #32
 8000c4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	fa24 f303 	lsr.w	r3, r4, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	430c      	orrs	r4, r1
 8000c5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c64:	fa1f f78c 	uxth.w	r7, ip
 8000c68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c70:	0c23      	lsrs	r3, r4, #16
 8000c72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c76:	fb00 f107 	mul.w	r1, r0, r7
 8000c7a:	4299      	cmp	r1, r3
 8000c7c:	d908      	bls.n	8000c90 <__udivmoddi4+0x24c>
 8000c7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c86:	d22c      	bcs.n	8000ce2 <__udivmoddi4+0x29e>
 8000c88:	4299      	cmp	r1, r3
 8000c8a:	d92a      	bls.n	8000ce2 <__udivmoddi4+0x29e>
 8000c8c:	3802      	subs	r0, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	b2a4      	uxth	r4, r4
 8000c94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c98:	fb08 3311 	mls	r3, r8, r1, r3
 8000c9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca0:	fb01 f307 	mul.w	r3, r1, r7
 8000ca4:	42a3      	cmp	r3, r4
 8000ca6:	d908      	bls.n	8000cba <__udivmoddi4+0x276>
 8000ca8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cb0:	d213      	bcs.n	8000cda <__udivmoddi4+0x296>
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	d911      	bls.n	8000cda <__udivmoddi4+0x296>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4464      	add	r4, ip
 8000cba:	1ae4      	subs	r4, r4, r3
 8000cbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cc0:	e739      	b.n	8000b36 <__udivmoddi4+0xf2>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	e6f0      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e706      	b.n	8000ad8 <__udivmoddi4+0x94>
 8000cca:	45c8      	cmp	r8, r9
 8000ccc:	d2ae      	bcs.n	8000c2c <__udivmoddi4+0x1e8>
 8000cce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cd6:	3801      	subs	r0, #1
 8000cd8:	e7a8      	b.n	8000c2c <__udivmoddi4+0x1e8>
 8000cda:	4631      	mov	r1, r6
 8000cdc:	e7ed      	b.n	8000cba <__udivmoddi4+0x276>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	e799      	b.n	8000c16 <__udivmoddi4+0x1d2>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e7d4      	b.n	8000c90 <__udivmoddi4+0x24c>
 8000ce6:	46d6      	mov	lr, sl
 8000ce8:	e77f      	b.n	8000bea <__udivmoddi4+0x1a6>
 8000cea:	4463      	add	r3, ip
 8000cec:	3802      	subs	r0, #2
 8000cee:	e74d      	b.n	8000b8c <__udivmoddi4+0x148>
 8000cf0:	4606      	mov	r6, r0
 8000cf2:	4623      	mov	r3, r4
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e70f      	b.n	8000b18 <__udivmoddi4+0xd4>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	e730      	b.n	8000b60 <__udivmoddi4+0x11c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	@ (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f94f 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	200f      	movs	r0, #15
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f003 fdfa 	bl	8004930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	@ (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f967 	bl	800103a <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 f92f 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	@ (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000004 	.word	0x20000004
 8000da4:	20000000 	.word	0x20000000

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	@ (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000004 	.word	0x20000004
 8000dcc:	2000006c 	.word	0x2000006c

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000006c 	.word	0x2000006c

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000004 	.word	0x20000004

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	@ (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db0b      	blt.n	8000ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	f003 021f 	and.w	r2, r3, #31
 8000eac:	4907      	ldr	r1, [pc, #28]	@ (8000ecc <__NVIC_EnableIRQ+0x38>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	@ (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	@ (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	@ 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	@ 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff8e 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	@ (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff29 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff3e 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff8e 	bl	8000f24 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5d 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff31 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ffa2 	bl	8000f8c <SysTick_Config>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d004      	beq.n	8001070 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2280      	movs	r2, #128	@ 0x80
 800106a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e00c      	b.n	800108a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2205      	movs	r2, #5
 8001074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010a4:	b2db      	uxtb	r3, r3
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	@ 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	e159      	b.n	8001384 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f040 8148 	bne.w	800137e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x4a>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b12      	cmp	r3, #18
 80010fc:	d123      	bne.n	8001146 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	08da      	lsrs	r2, r3, #3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3208      	adds	r2, #8
 8001106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	220f      	movs	r2, #15
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	691a      	ldr	r2, [r3, #16]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	69b9      	ldr	r1, [r7, #24]
 8001142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0203 	and.w	r2, r3, #3
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d00b      	beq.n	800119a <HAL_GPIO_Init+0xe6>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118e:	2b11      	cmp	r3, #17
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b12      	cmp	r3, #18
 8001198:	d130      	bne.n	80011fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f003 0201 	and.w	r2, r3, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001234:	2b00      	cmp	r3, #0
 8001236:	f000 80a2 	beq.w	800137e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b57      	ldr	r3, [pc, #348]	@ (800139c <HAL_GPIO_Init+0x2e8>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	4a56      	ldr	r2, [pc, #344]	@ (800139c <HAL_GPIO_Init+0x2e8>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001248:	6453      	str	r3, [r2, #68]	@ 0x44
 800124a:	4b54      	ldr	r3, [pc, #336]	@ (800139c <HAL_GPIO_Init+0x2e8>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001256:	4a52      	ldr	r2, [pc, #328]	@ (80013a0 <HAL_GPIO_Init+0x2ec>)
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	3302      	adds	r3, #2
 800125e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a49      	ldr	r2, [pc, #292]	@ (80013a4 <HAL_GPIO_Init+0x2f0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d019      	beq.n	80012b6 <HAL_GPIO_Init+0x202>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a48      	ldr	r2, [pc, #288]	@ (80013a8 <HAL_GPIO_Init+0x2f4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_GPIO_Init+0x1fe>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a47      	ldr	r2, [pc, #284]	@ (80013ac <HAL_GPIO_Init+0x2f8>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d00d      	beq.n	80012ae <HAL_GPIO_Init+0x1fa>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a46      	ldr	r2, [pc, #280]	@ (80013b0 <HAL_GPIO_Init+0x2fc>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d007      	beq.n	80012aa <HAL_GPIO_Init+0x1f6>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a45      	ldr	r2, [pc, #276]	@ (80013b4 <HAL_GPIO_Init+0x300>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d101      	bne.n	80012a6 <HAL_GPIO_Init+0x1f2>
 80012a2:	2304      	movs	r3, #4
 80012a4:	e008      	b.n	80012b8 <HAL_GPIO_Init+0x204>
 80012a6:	2307      	movs	r3, #7
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x204>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e004      	b.n	80012b8 <HAL_GPIO_Init+0x204>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e002      	b.n	80012b8 <HAL_GPIO_Init+0x204>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_GPIO_Init+0x204>
 80012b6:	2300      	movs	r3, #0
 80012b8:	69fa      	ldr	r2, [r7, #28]
 80012ba:	f002 0203 	and.w	r2, r2, #3
 80012be:	0092      	lsls	r2, r2, #2
 80012c0:	4093      	lsls	r3, r2
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c8:	4935      	ldr	r1, [pc, #212]	@ (80013a0 <HAL_GPIO_Init+0x2ec>)
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d6:	4b38      	ldr	r3, [pc, #224]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012fa:	4a2f      	ldr	r2, [pc, #188]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001300:	4b2d      	ldr	r3, [pc, #180]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001324:	4a24      	ldr	r2, [pc, #144]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800132a:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800134e:	4a1a      	ldr	r2, [pc, #104]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001378:	4a0f      	ldr	r2, [pc, #60]	@ (80013b8 <HAL_GPIO_Init+0x304>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3301      	adds	r3, #1
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	2b0f      	cmp	r3, #15
 8001388:	f67f aea2 	bls.w	80010d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800138c:	bf00      	nop
 800138e:	bf00      	nop
 8001390:	3724      	adds	r7, #36	@ 0x24
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40013800 	.word	0x40013800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40013c00 	.word	0x40013c00

080013bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e001      	b.n	80013de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	619a      	str	r2, [r3, #24]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
	...

08001420 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800142a:	4b08      	ldr	r3, [pc, #32]	@ (800144c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f806 	bl	8001450 <HAL_GPIO_EXTI_Callback>
  }
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40013c00 	.word	0x40013c00

08001450 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b088      	sub	sp, #32
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147e:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001486:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800148e:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	2b10      	cmp	r3, #16
 8001494:	d003      	beq.n	800149e <HAL_I2C_EV_IRQHandler+0x38>
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	2b40      	cmp	r3, #64	@ 0x40
 800149a:	f040 80a6 	bne.w	80015ea <HAL_I2C_EV_IRQHandler+0x184>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10d      	bne.n	80014d4 <HAL_I2C_EV_IRQHandler+0x6e>
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80014be:	d003      	beq.n	80014c8 <HAL_I2C_EV_IRQHandler+0x62>
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80014c6:	d101      	bne.n	80014cc <HAL_I2C_EV_IRQHandler+0x66>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <HAL_I2C_EV_IRQHandler+0x68>
 80014cc:	2300      	movs	r3, #0
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	f000 8109 	beq.w	80016e6 <HAL_I2C_EV_IRQHandler+0x280>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00b      	beq.n	80014f6 <HAL_I2C_EV_IRQHandler+0x90>
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f001 fb44 	bl	8002b76 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fce0 	bl	8001eb4 <I2C_Master_SB>
 80014f4:	e078      	b.n	80015e8 <HAL_I2C_EV_IRQHandler+0x182>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <HAL_I2C_EV_IRQHandler+0xac>
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 fd50 	bl	8001fb0 <I2C_Master_ADD10>
 8001510:	e06a      	b.n	80015e8 <HAL_I2C_EV_IRQHandler+0x182>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_I2C_EV_IRQHandler+0xc8>
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 fd6c 	bl	8002004 <I2C_Master_ADDR>
 800152c:	e05c      	b.n	80015e8 <HAL_I2C_EV_IRQHandler+0x182>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d02b      	beq.n	8001590 <HAL_I2C_EV_IRQHandler+0x12a>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001546:	f000 80d0 	beq.w	80016ea <HAL_I2C_EV_IRQHandler+0x284>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00d      	beq.n	8001570 <HAL_I2C_EV_IRQHandler+0x10a>
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800155a:	2b00      	cmp	r3, #0
 800155c:	d008      	beq.n	8001570 <HAL_I2C_EV_IRQHandler+0x10a>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	d103      	bne.n	8001570 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f9c9 	bl	8001900 <I2C_MasterTransmit_TXE>
 800156e:	e03b      	b.n	80015e8 <HAL_I2C_EV_IRQHandler+0x182>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80b7 	beq.w	80016ea <HAL_I2C_EV_IRQHandler+0x284>
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 80b1 	beq.w	80016ea <HAL_I2C_EV_IRQHandler+0x284>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fab1 	bl	8001af0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800158e:	e0ac      	b.n	80016ea <HAL_I2C_EV_IRQHandler+0x284>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800159a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800159e:	f000 80a4 	beq.w	80016ea <HAL_I2C_EV_IRQHandler+0x284>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00d      	beq.n	80015c8 <HAL_I2C_EV_IRQHandler+0x162>
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <HAL_I2C_EV_IRQHandler+0x162>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d103      	bne.n	80015c8 <HAL_I2C_EV_IRQHandler+0x162>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fb0b 	bl	8001bdc <I2C_MasterReceive_RXNE>
 80015c6:	e00f      	b.n	80015e8 <HAL_I2C_EV_IRQHandler+0x182>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 808b 	beq.w	80016ea <HAL_I2C_EV_IRQHandler+0x284>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8085 	beq.w	80016ea <HAL_I2C_EV_IRQHandler+0x284>
        {
          I2C_MasterReceive_BTF(hi2c);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 fb7d 	bl	8001ce0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80015e6:	e080      	b.n	80016ea <HAL_I2C_EV_IRQHandler+0x284>
 80015e8:	e07f      	b.n	80016ea <HAL_I2C_EV_IRQHandler+0x284>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d004      	beq.n	80015fc <HAL_I2C_EV_IRQHandler+0x196>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	e007      	b.n	800160c <HAL_I2C_EV_IRQHandler+0x1a6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d011      	beq.n	800163a <HAL_I2C_EV_IRQHandler+0x1d4>
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00c      	beq.n	800163a <HAL_I2C_EV_IRQHandler+0x1d4>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_I2C_EV_IRQHandler+0x1ca>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001630:	69b9      	ldr	r1, [r7, #24]
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 ff35 	bl	80024a2 <I2C_Slave_ADDR>
 8001638:	e05a      	b.n	80016f0 <HAL_I2C_EV_IRQHandler+0x28a>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	2b00      	cmp	r3, #0
 8001642:	d008      	beq.n	8001656 <HAL_I2C_EV_IRQHandler+0x1f0>
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_I2C_EV_IRQHandler+0x1f0>
    {
      I2C_Slave_STOPF(hi2c);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 ff6a 	bl	8002528 <I2C_Slave_STOPF>
 8001654:	e04c      	b.n	80016f0 <HAL_I2C_EV_IRQHandler+0x28a>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001656:	7bbb      	ldrb	r3, [r7, #14]
 8001658:	2b21      	cmp	r3, #33	@ 0x21
 800165a:	d002      	beq.n	8001662 <HAL_I2C_EV_IRQHandler+0x1fc>
 800165c:	7bbb      	ldrb	r3, [r7, #14]
 800165e:	2b29      	cmp	r3, #41	@ 0x29
 8001660:	d120      	bne.n	80016a4 <HAL_I2C_EV_IRQHandler+0x23e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00d      	beq.n	8001688 <HAL_I2C_EV_IRQHandler+0x222>
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001672:	2b00      	cmp	r3, #0
 8001674:	d008      	beq.n	8001688 <HAL_I2C_EV_IRQHandler+0x222>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d103      	bne.n	8001688 <HAL_I2C_EV_IRQHandler+0x222>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 fe50 	bl	8002326 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001686:	e032      	b.n	80016ee <HAL_I2C_EV_IRQHandler+0x288>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0304 	and.w	r3, r3, #4
 800168e:	2b00      	cmp	r3, #0
 8001690:	d02d      	beq.n	80016ee <HAL_I2C_EV_IRQHandler+0x288>
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001698:	2b00      	cmp	r3, #0
 800169a:	d028      	beq.n	80016ee <HAL_I2C_EV_IRQHandler+0x288>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 fe7f 	bl	80023a0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016a2:	e024      	b.n	80016ee <HAL_I2C_EV_IRQHandler+0x288>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00d      	beq.n	80016ca <HAL_I2C_EV_IRQHandler+0x264>
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <HAL_I2C_EV_IRQHandler+0x264>
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d103      	bne.n	80016ca <HAL_I2C_EV_IRQHandler+0x264>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fe8d 	bl	80023e2 <I2C_SlaveReceive_RXNE>
 80016c8:	e012      	b.n	80016f0 <HAL_I2C_EV_IRQHandler+0x28a>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00d      	beq.n	80016f0 <HAL_I2C_EV_IRQHandler+0x28a>
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d008      	beq.n	80016f0 <HAL_I2C_EV_IRQHandler+0x28a>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 febd 	bl	800245e <I2C_SlaveReceive_BTF>
 80016e4:	e004      	b.n	80016f0 <HAL_I2C_EV_IRQHandler+0x28a>
      return;
 80016e6:	bf00      	nop
 80016e8:	e002      	b.n	80016f0 <HAL_I2C_EV_IRQHandler+0x28a>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016ea:	bf00      	nop
 80016ec:	e000      	b.n	80016f0 <HAL_I2C_EV_IRQHandler+0x28a>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80016ee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b08a      	sub	sp, #40	@ 0x28
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00d      	beq.n	8001738 <HAL_I2C_ER_IRQHandler+0x42>
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d008      	beq.n	8001738 <HAL_I2C_ER_IRQHandler+0x42>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001736:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00d      	beq.n	800175e <HAL_I2C_ER_IRQHandler+0x68>
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001748:	2b00      	cmp	r3, #0
 800174a:	d008      	beq.n	800175e <HAL_I2C_ER_IRQHandler+0x68>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174e:	f043 0302 	orr.w	r3, r3, #2
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800175c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800175e:	6a3b      	ldr	r3, [r7, #32]
 8001760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001764:	2b00      	cmp	r3, #0
 8001766:	d040      	beq.n	80017ea <HAL_I2C_ER_IRQHandler+0xf4>
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d03b      	beq.n	80017ea <HAL_I2C_ER_IRQHandler+0xf4>
  {
    tmp1 = hi2c->Mode;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001778:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001788:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001790:	7efb      	ldrb	r3, [r7, #27]
 8001792:	2b20      	cmp	r3, #32
 8001794:	d112      	bne.n	80017bc <HAL_I2C_ER_IRQHandler+0xc6>
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d10f      	bne.n	80017bc <HAL_I2C_ER_IRQHandler+0xc6>
 800179c:	7cfb      	ldrb	r3, [r7, #19]
 800179e:	2b21      	cmp	r3, #33	@ 0x21
 80017a0:	d008      	beq.n	80017b4 <HAL_I2C_ER_IRQHandler+0xbe>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80017a2:	7cfb      	ldrb	r3, [r7, #19]
 80017a4:	2b29      	cmp	r3, #41	@ 0x29
 80017a6:	d005      	beq.n	80017b4 <HAL_I2C_ER_IRQHandler+0xbe>
 80017a8:	7cfb      	ldrb	r3, [r7, #19]
 80017aa:	2b28      	cmp	r3, #40	@ 0x28
 80017ac:	d106      	bne.n	80017bc <HAL_I2C_ER_IRQHandler+0xc6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b21      	cmp	r3, #33	@ 0x21
 80017b2:	d103      	bne.n	80017bc <HAL_I2C_ER_IRQHandler+0xc6>
    {
      I2C_Slave_AF(hi2c);
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 ffe7 	bl	8002788 <I2C_Slave_AF>
 80017ba:	e016      	b.n	80017ea <HAL_I2C_ER_IRQHandler+0xf4>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80017c4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b10      	cmp	r3, #16
 80017d8:	d107      	bne.n	80017ea <HAL_I2C_ER_IRQHandler+0xf4>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017e8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00d      	beq.n	8001810 <HAL_I2C_ER_IRQHandler+0x11a>
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d008      	beq.n	8001810 <HAL_I2C_ER_IRQHandler+0x11a>
  {
    error |= HAL_I2C_ERROR_OVR;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800180e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	2b00      	cmp	r3, #0
 8001814:	d008      	beq.n	8001828 <HAL_I2C_ER_IRQHandler+0x132>
  {
    hi2c->ErrorCode |= error;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f001 f820 	bl	8002868 <I2C_ITError>
  }
}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	@ 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
 800188c:	4613      	mov	r3, r2
 800188e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800190e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001916:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001922:	2b00      	cmp	r3, #0
 8001924:	d150      	bne.n	80019c8 <I2C_MasterTransmit_TXE+0xc8>
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	2b21      	cmp	r3, #33	@ 0x21
 800192a:	d14d      	bne.n	80019c8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b08      	cmp	r3, #8
 8001930:	d01d      	beq.n	800196e <I2C_MasterTransmit_TXE+0x6e>
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b20      	cmp	r3, #32
 8001936:	d01a      	beq.n	800196e <I2C_MasterTransmit_TXE+0x6e>
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800193e:	d016      	beq.n	800196e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800194e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2211      	movs	r2, #17
 8001954:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2220      	movs	r2, #32
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ff62 	bl	8001830 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800196c:	e0bc      	b.n	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800197c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800198c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2220      	movs	r2, #32
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b40      	cmp	r3, #64	@ 0x40
 80019a6:	d107      	bne.n	80019b8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff ff7d 	bl	80018b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019b6:	e097      	b.n	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff35 	bl	8001830 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80019c6:	e08f      	b.n	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	2b21      	cmp	r3, #33	@ 0x21
 80019cc:	d007      	beq.n	80019de <I2C_MasterTransmit_TXE+0xde>
 80019ce:	7bbb      	ldrb	r3, [r7, #14]
 80019d0:	2b40      	cmp	r3, #64	@ 0x40
 80019d2:	f040 8089 	bne.w	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	2b22      	cmp	r3, #34	@ 0x22
 80019da:	f040 8085 	bne.w	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d108      	bne.n	80019fa <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80019f8:	e076      	b.n	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b40      	cmp	r3, #64	@ 0x40
 8001a04:	d15d      	bne.n	8001ac2 <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d11d      	bne.n	8001a4a <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d10b      	bne.n	8001a2e <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a26:	1c9a      	adds	r2, r3, #2
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001a2c:	e05c      	b.n	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	121b      	asrs	r3, r3, #8
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001a48:	e04e      	b.n	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d10b      	bne.n	8001a6a <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001a68:	e03e      	b.n	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d13a      	bne.n	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b22      	cmp	r3, #34	@ 0x22
 8001a7c:	d108      	bne.n	8001a90 <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a8c:	601a      	str	r2, [r3, #0]
}
 8001a8e:	e02b      	b.n	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b21      	cmp	r3, #33	@ 0x21
 8001a9a:	d125      	bne.n	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	781a      	ldrb	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	625a      	str	r2, [r3, #36]	@ 0x24
            hi2c->XferCount--;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001ac0:	e012      	b.n	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	781a      	ldrb	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001ae6:	e7ff      	b.n	8001ae8 <I2C_MasterTransmit_TXE+0x1e8>
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001afc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b21      	cmp	r3, #33	@ 0x21
 8001b08:	d164      	bne.n	8001bd4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d012      	beq.n	8001b3a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b18:	781a      	ldrb	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	3b01      	subs	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8001b38:	e04c      	b.n	8001bd4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d01d      	beq.n	8001b7c <I2C_MasterTransmit_BTF+0x8c>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b20      	cmp	r3, #32
 8001b44:	d01a      	beq.n	8001b7c <I2C_MasterTransmit_BTF+0x8c>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001b4c:	d016      	beq.n	8001b7c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b5c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2211      	movs	r2, #17
 8001b62:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2220      	movs	r2, #32
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fe5b 	bl	8001830 <HAL_I2C_MasterTxCpltCallback>
}
 8001b7a:	e02b      	b.n	8001bd4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001b8a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b9a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b40      	cmp	r3, #64	@ 0x40
 8001bb4:	d107      	bne.n	8001bc6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7ff fe76 	bl	80018b0 <HAL_I2C_MemTxCpltCallback>
}
 8001bc4:	e006      	b.n	8001bd4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff fe2e 	bl	8001830 <HAL_I2C_MasterTxCpltCallback>
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b22      	cmp	r3, #34	@ 0x22
 8001bee:	d173      	bne.n	8001cd8 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d920      	bls.n	8001c40 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d154      	bne.n	8001cd8 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c3c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001c3e:	e04b      	b.n	8001cd8 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d047      	beq.n	8001cd8 <I2C_MasterReceive_RXNE+0xfc>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d002      	beq.n	8001c54 <I2C_MasterReceive_RXNE+0x78>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d141      	bne.n	8001cd8 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c62:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c72:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	3b01      	subs	r3, #1
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2220      	movs	r2, #32
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b40      	cmp	r3, #64	@ 0x40
 8001cac:	d10a      	bne.n	8001cc4 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7ff fe01 	bl	80018c4 <HAL_I2C_MemRxCpltCallback>
}
 8001cc2:	e009      	b.n	8001cd8 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2212      	movs	r2, #18
 8001cd0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fdb6 	bl	8001844 <HAL_I2C_MasterRxCpltCallback>
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cec:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d11b      	bne.n	8001d30 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d06:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691a      	ldr	r2, [r3, #16]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	1c5a      	adds	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001d2e:	e0bd      	b.n	8001eac <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d129      	bne.n	8001d8e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d48:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d00a      	beq.n	8001d66 <I2C_MasterReceive_BTF+0x86>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d007      	beq.n	8001d66 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d64:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d70:	b2d2      	uxtb	r2, r2
 8001d72:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001d8c:	e08e      	b.n	8001eac <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d176      	bne.n	8001e86 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d002      	beq.n	8001da4 <I2C_MasterReceive_BTF+0xc4>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d108      	bne.n	8001db6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	e019      	b.n	8001dea <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d002      	beq.n	8001dc2 <I2C_MasterReceive_BTF+0xe2>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d108      	bne.n	8001dd4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e00a      	b.n	8001dea <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b10      	cmp	r3, #16
 8001dd8:	d007      	beq.n	8001dea <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001de8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691a      	ldr	r2, [r3, #16]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001e44:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2220      	movs	r2, #32
 8001e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b40      	cmp	r3, #64	@ 0x40
 8001e58:	d10a      	bne.n	8001e70 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fd2b 	bl	80018c4 <HAL_I2C_MemRxCpltCallback>
}
 8001e6e:	e01d      	b.n	8001eac <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2212      	movs	r2, #18
 8001e7c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fce0 	bl	8001844 <HAL_I2C_MasterRxCpltCallback>
}
 8001e84:	e012      	b.n	8001eac <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001eac:	bf00      	nop
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b40      	cmp	r3, #64	@ 0x40
 8001ec6:	d117      	bne.n	8001ef8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ee0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001ee2:	e05f      	b.n	8001fa4 <I2C_Master_SB+0xf0>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	611a      	str	r2, [r3, #16]
}
 8001ef6:	e055      	b.n	8001fa4 <I2C_Master_SB+0xf0>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f00:	d12b      	bne.n	8001f5a <I2C_Master_SB+0xa6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b21      	cmp	r3, #33	@ 0x21
 8001f0c:	d109      	bne.n	8001f22 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	461a      	mov	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f1e:	611a      	str	r2, [r3, #16]
 8001f20:	e008      	b.n	8001f34 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d104      	bne.n	8001f48 <I2C_Master_SB+0x94>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d02d      	beq.n	8001fa4 <I2C_Master_SB+0xf0>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f56:	605a      	str	r2, [r3, #4]
}
 8001f58:	e024      	b.n	8001fa4 <I2C_Master_SB+0xf0>
      if (hi2c->EventCount == 0U)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10e      	bne.n	8001f80 <I2C_Master_SB+0xcc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	11db      	asrs	r3, r3, #7
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f003 0306 	and.w	r3, r3, #6
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f063 030f 	orn	r3, r3, #15
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	611a      	str	r2, [r3, #16]
}
 8001f7e:	e011      	b.n	8001fa4 <I2C_Master_SB+0xf0>
      else if (hi2c->EventCount == 1U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10d      	bne.n	8001fa4 <I2C_Master_SB+0xf0>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	11db      	asrs	r3, r3, #7
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f003 0306 	and.w	r3, r3, #6
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f063 030e 	orn	r3, r3, #14
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	611a      	str	r2, [r3, #16]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d103      	bne.n	8001fd4 <I2C_Master_ADD10+0x24>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d011      	beq.n	8001ff8 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d104      	bne.n	8001fe8 <I2C_Master_ADD10+0x38>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ff6:	605a      	str	r2, [r3, #4]
    }
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002004:	b480      	push	{r7}
 8002006:	b091      	sub	sp, #68	@ 0x44
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002012:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002020:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b22      	cmp	r3, #34	@ 0x22
 800202c:	f040 8169 	bne.w	8002302 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002034:	2b00      	cmp	r3, #0
 8002036:	d10f      	bne.n	8002058 <I2C_Master_ADDR+0x54>
 8002038:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800203c:	2b40      	cmp	r3, #64	@ 0x40
 800203e:	d10b      	bne.n	8002058 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002040:	2300      	movs	r3, #0
 8002042:	633b      	str	r3, [r7, #48]	@ 0x30
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	633b      	str	r3, [r7, #48]	@ 0x30
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	633b      	str	r3, [r7, #48]	@ 0x30
 8002054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002056:	e160      	b.n	800231a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800205c:	2b00      	cmp	r3, #0
 800205e:	d11d      	bne.n	800209c <I2C_Master_ADDR+0x98>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002068:	d118      	bne.n	800209c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206a:	2300      	movs	r3, #0
 800206c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800207e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800208e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	651a      	str	r2, [r3, #80]	@ 0x50
 800209a:	e13e      	b.n	800231a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d113      	bne.n	80020ce <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a6:	2300      	movs	r3, #0
 80020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e115      	b.n	80022fa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	f040 808a 	bne.w	80021ee <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80020da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80020e0:	d137      	bne.n	8002152 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020f0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002100:	d113      	bne.n	800212a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002110:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002112:	2300      	movs	r3, #0
 8002114:	627b      	str	r3, [r7, #36]	@ 0x24
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24
 8002126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002128:	e0e7      	b.n	80022fa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	623b      	str	r3, [r7, #32]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	623b      	str	r3, [r7, #32]
 800213e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	e0d3      	b.n	80022fa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002154:	2b08      	cmp	r3, #8
 8002156:	d02e      	beq.n	80021b6 <I2C_Master_ADDR+0x1b2>
 8002158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800215a:	2b20      	cmp	r3, #32
 800215c:	d02b      	beq.n	80021b6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800215e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002160:	2b12      	cmp	r3, #18
 8002162:	d102      	bne.n	800216a <I2C_Master_ADDR+0x166>
 8002164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002166:	2b01      	cmp	r3, #1
 8002168:	d125      	bne.n	80021b6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800216a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800216c:	2b04      	cmp	r3, #4
 800216e:	d00e      	beq.n	800218e <I2C_Master_ADDR+0x18a>
 8002170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002172:	2b02      	cmp	r3, #2
 8002174:	d00b      	beq.n	800218e <I2C_Master_ADDR+0x18a>
 8002176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002178:	2b10      	cmp	r3, #16
 800217a:	d008      	beq.n	800218e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e007      	b.n	800219e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800219c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	e0a1      	b.n	80022fa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021c4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	e085      	b.n	80022fa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d14d      	bne.n	8002294 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80021f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d016      	beq.n	800222c <I2C_Master_ADDR+0x228>
 80021fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002200:	2b02      	cmp	r3, #2
 8002202:	d013      	beq.n	800222c <I2C_Master_ADDR+0x228>
 8002204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002206:	2b10      	cmp	r3, #16
 8002208:	d010      	beq.n	800222c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002218:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e007      	b.n	800223c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800223a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002246:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800224a:	d117      	bne.n	800227c <I2C_Master_ADDR+0x278>
 800224c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800224e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002252:	d00b      	beq.n	800226c <I2C_Master_ADDR+0x268>
 8002254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002256:	2b01      	cmp	r3, #1
 8002258:	d008      	beq.n	800226c <I2C_Master_ADDR+0x268>
 800225a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800225c:	2b08      	cmp	r3, #8
 800225e:	d005      	beq.n	800226c <I2C_Master_ADDR+0x268>
 8002260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002262:	2b10      	cmp	r3, #16
 8002264:	d002      	beq.n	800226c <I2C_Master_ADDR+0x268>
 8002266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002268:	2b20      	cmp	r3, #32
 800226a:	d107      	bne.n	800227c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800227a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	e032      	b.n	80022fa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022a2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022b2:	d117      	bne.n	80022e4 <I2C_Master_ADDR+0x2e0>
 80022b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022ba:	d00b      	beq.n	80022d4 <I2C_Master_ADDR+0x2d0>
 80022bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d008      	beq.n	80022d4 <I2C_Master_ADDR+0x2d0>
 80022c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d005      	beq.n	80022d4 <I2C_Master_ADDR+0x2d0>
 80022c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ca:	2b10      	cmp	r3, #16
 80022cc:	d002      	beq.n	80022d4 <I2C_Master_ADDR+0x2d0>
 80022ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	d107      	bne.n	80022e4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80022e2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022e4:	2300      	movs	r3, #0
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002300:	e00b      	b.n	800231a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]
}
 8002318:	e7ff      	b.n	800231a <I2C_Master_ADDR+0x316>
 800231a:	bf00      	nop
 800231c:	3744      	adds	r7, #68	@ 0x44
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002334:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d02b      	beq.n	8002398 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	781a      	ldrb	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235a:	b29b      	uxth	r3, r3
 800235c:	3b01      	subs	r3, #1
 800235e:	b29a      	uxth	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d114      	bne.n	8002398 <I2C_SlaveTransmit_TXE+0x72>
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b29      	cmp	r3, #41	@ 0x29
 8002372:	d111      	bne.n	8002398 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002382:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2221      	movs	r2, #33	@ 0x21
 8002388:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2228      	movs	r2, #40	@ 0x28
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fa60 	bl	8001858 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d011      	beq.n	80023d6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b6:	781a      	ldrb	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80023d6:	bf00      	nop
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b084      	sub	sp, #16
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023f0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d02c      	beq.n	8002456 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002426:	b29b      	uxth	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d114      	bne.n	8002456 <I2C_SlaveReceive_RXNE+0x74>
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002430:	d111      	bne.n	8002456 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002440:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2222      	movs	r2, #34	@ 0x22
 8002446:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2228      	movs	r2, #40	@ 0x28
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff fa0b 	bl	800186c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002456:	bf00      	nop
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d012      	beq.n	8002496 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b084      	sub	sp, #16
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80024bc:	2b28      	cmp	r3, #40	@ 0x28
 80024be:	d125      	bne.n	800250c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ce:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80024da:	2301      	movs	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d103      	bne.n	80024f0 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	81bb      	strh	r3, [r7, #12]
 80024ee:	e002      	b.n	80024f6 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80024fe:	89ba      	ldrh	r2, [r7, #12]
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	4619      	mov	r1, r3
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff f9bb 	bl	8001880 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800250a:	e008      	b.n	800251e <I2C_Slave_ADDR+0x7c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0202 	mvn.w	r2, #2
 8002514:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002536:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002546:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002548:	2300      	movs	r3, #0
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002574:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002584:	d172      	bne.n	800266c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b22      	cmp	r3, #34	@ 0x22
 800258a:	d002      	beq.n	8002592 <I2C_Slave_STOPF+0x6a>
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002590:	d135      	bne.n	80025fe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	b29a      	uxth	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f043 0204 	orr.w	r2, r3, #4
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fd63 	bl	8001096 <HAL_DMA_GetState>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d049      	beq.n	800266a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025da:	4a69      	ldr	r2, [pc, #420]	@ (8002780 <I2C_Slave_STOPF+0x258>)
 80025dc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7fe fd35 	bl	8001052 <HAL_DMA_Abort_IT>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d03d      	beq.n	800266a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80025f8:	4610      	mov	r0, r2
 80025fa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80025fc:	e035      	b.n	800266a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	b29a      	uxth	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f043 0204 	orr.w	r2, r3, #4
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002630:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fd2d 	bl	8001096 <HAL_DMA_GetState>
 800263c:	4603      	mov	r3, r0
 800263e:	2b01      	cmp	r3, #1
 8002640:	d014      	beq.n	800266c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002646:	4a4e      	ldr	r2, [pc, #312]	@ (8002780 <I2C_Slave_STOPF+0x258>)
 8002648:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fcff 	bl	8001052 <HAL_DMA_Abort_IT>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d008      	beq.n	800266c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002664:	4610      	mov	r0, r2
 8002666:	4798      	blx	r3
 8002668:	e000      	b.n	800266c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800266a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d03e      	beq.n	80026f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b04      	cmp	r3, #4
 8002682:	d112      	bne.n	80026aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b4:	2b40      	cmp	r3, #64	@ 0x40
 80026b6:	d112      	bne.n	80026de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	f043 0204 	orr.w	r2, r3, #4
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f8b3 	bl	8002868 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002702:	e039      	b.n	8002778 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b2a      	cmp	r3, #42	@ 0x2a
 8002708:	d109      	bne.n	800271e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2228      	movs	r2, #40	@ 0x28
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff f8a7 	bl	800186c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b28      	cmp	r3, #40	@ 0x28
 8002728:	d111      	bne.n	800274e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a15      	ldr	r2, [pc, #84]	@ (8002784 <I2C_Slave_STOPF+0x25c>)
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff f8a8 	bl	800189c <HAL_I2C_ListenCpltCallback>
}
 800274c:	e014      	b.n	8002778 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	2b22      	cmp	r3, #34	@ 0x22
 8002754:	d002      	beq.n	800275c <I2C_Slave_STOPF+0x234>
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	2b22      	cmp	r3, #34	@ 0x22
 800275a:	d10d      	bne.n	8002778 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2220      	movs	r2, #32
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff f87a 	bl	800186c <HAL_I2C_SlaveRxCpltCallback>
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	08002a99 	.word	0x08002a99
 8002784:	ffff0000 	.word	0xffff0000

08002788 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d002      	beq.n	80027aa <I2C_Slave_AF+0x22>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b20      	cmp	r3, #32
 80027a8:	d129      	bne.n	80027fe <I2C_Slave_AF+0x76>
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
 80027ac:	2b28      	cmp	r3, #40	@ 0x28
 80027ae:	d126      	bne.n	80027fe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002864 <I2C_Slave_AF+0xdc>)
 80027b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80027c4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027ce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027de:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2220      	movs	r2, #32
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff f850 	bl	800189c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80027fc:	e02e      	b.n	800285c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
 8002800:	2b21      	cmp	r3, #33	@ 0x21
 8002802:	d126      	bne.n	8002852 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a17      	ldr	r2, [pc, #92]	@ (8002864 <I2C_Slave_AF+0xdc>)
 8002808:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2221      	movs	r2, #33	@ 0x21
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685a      	ldr	r2, [r3, #4]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800282e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002838:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002848:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff f804 	bl	8001858 <HAL_I2C_SlaveTxCpltCallback>
}
 8002850:	e004      	b.n	800285c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800285a:	615a      	str	r2, [r3, #20]
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	ffff0000 	.word	0xffff0000

08002868 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002876:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b10      	cmp	r3, #16
 8002882:	d10a      	bne.n	800289a <I2C_ITError+0x32>
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b22      	cmp	r3, #34	@ 0x22
 8002888:	d107      	bne.n	800289a <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002898:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80028a0:	2b28      	cmp	r3, #40	@ 0x28
 80028a2:	d107      	bne.n	80028b4 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2228      	movs	r2, #40	@ 0x28
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80028b2:	e015      	b.n	80028e0 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028c2:	d006      	beq.n	80028d2 <I2C_ITError+0x6a>
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b60      	cmp	r3, #96	@ 0x60
 80028c8:	d003      	beq.n	80028d2 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80028ee:	d162      	bne.n	80029b6 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002904:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b01      	cmp	r3, #1
 800290c:	d020      	beq.n	8002950 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002912:	4a5f      	ldr	r2, [pc, #380]	@ (8002a90 <I2C_ITError+0x228>)
 8002914:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fb99 	bl	8001052 <HAL_DMA_Abort_IT>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 8089 	beq.w	8002a3a <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800294a:	4610      	mov	r0, r2
 800294c:	4798      	blx	r3
 800294e:	e074      	b.n	8002a3a <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002954:	4a4e      	ldr	r2, [pc, #312]	@ (8002a90 <I2C_ITError+0x228>)
 8002956:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fb78 	bl	8001052 <HAL_DMA_Abort_IT>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d068      	beq.n	8002a3a <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002972:	2b40      	cmp	r3, #64	@ 0x40
 8002974:	d10b      	bne.n	800298e <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 0201 	bic.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029b0:	4610      	mov	r0, r2
 80029b2:	4798      	blx	r3
 80029b4:	e041      	b.n	8002a3a <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b60      	cmp	r3, #96	@ 0x60
 80029c0:	d125      	bne.n	8002a0e <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029da:	2b40      	cmp	r3, #64	@ 0x40
 80029dc:	d10b      	bne.n	80029f6 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0201 	bic.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe ff70 	bl	80018ec <HAL_I2C_AbortCpltCallback>
 8002a0c:	e015      	b.n	8002a3a <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a18:	2b40      	cmp	r3, #64	@ 0x40
 8002a1a:	d10b      	bne.n	8002a34 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7fe ff4f 	bl	80018d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a40:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b04      	cmp	r3, #4
 8002a4c:	d11b      	bne.n	8002a86 <I2C_ITError+0x21e>
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b28      	cmp	r3, #40	@ 0x28
 8002a52:	d118      	bne.n	8002a86 <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a62:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a0b      	ldr	r2, [pc, #44]	@ (8002a94 <I2C_ITError+0x22c>)
 8002a68:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7fe ff0b 	bl	800189c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	08002a99 	.word	0x08002a99
 8002a94:	ffff0000 	.word	0xffff0000

08002a98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aac:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aba:	2200      	movs	r2, #0
 8002abc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002acc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad8:	2200      	movs	r2, #0
 8002ada:	651a      	str	r2, [r3, #80]	@ 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0201 	bic.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b60      	cmp	r3, #96	@ 0x60
 8002afe:	d10e      	bne.n	8002b1e <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2220      	movs	r2, #32
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f7fe fee8 	bl	80018ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b1c:	e027      	b.n	8002b6e <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
 8002b20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002b24:	2b28      	cmp	r3, #40	@ 0x28
 8002b26:	d117      	bne.n	8002b58 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2228      	movs	r2, #40	@ 0x28
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002b56:	e007      	b.n	8002b68 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7fe feb5 	bl	80018d8 <HAL_I2C_ErrorCallback>
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002b86:	d103      	bne.n	8002b90 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b8e:	e007      	b.n	8002ba0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002b98:	d102      	bne.n	8002ba0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e22a      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d075      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bca:	4b88      	ldr	r3, [pc, #544]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d00c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bd6:	4b85      	ldr	r3, [pc, #532]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d112      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be2:	4b82      	ldr	r3, [pc, #520]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bee:	d10b      	bne.n	8002c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	4b7e      	ldr	r3, [pc, #504]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d05b      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x108>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d157      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e205      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c10:	d106      	bne.n	8002c20 <HAL_RCC_OscConfig+0x74>
 8002c12:	4b76      	ldr	r3, [pc, #472]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a75      	ldr	r2, [pc, #468]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e01d      	b.n	8002c5c <HAL_RCC_OscConfig+0xb0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x98>
 8002c2a:	4b70      	ldr	r3, [pc, #448]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a6f      	ldr	r2, [pc, #444]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	4b6d      	ldr	r3, [pc, #436]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a6c      	ldr	r2, [pc, #432]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e00b      	b.n	8002c5c <HAL_RCC_OscConfig+0xb0>
 8002c44:	4b69      	ldr	r3, [pc, #420]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a68      	ldr	r2, [pc, #416]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c4e:	6013      	str	r3, [r2, #0]
 8002c50:	4b66      	ldr	r3, [pc, #408]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a65      	ldr	r2, [pc, #404]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d013      	beq.n	8002c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe f8b4 	bl	8000dd0 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c6c:	f7fe f8b0 	bl	8000dd0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b64      	cmp	r3, #100	@ 0x64
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e1ca      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0xc0>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f8a0 	bl	8000dd0 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe f89c 	bl	8000dd0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1b6      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca6:	4b51      	ldr	r3, [pc, #324]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0xe8>
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d063      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00b      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cce:	4b47      	ldr	r3, [pc, #284]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d11c      	bne.n	8002d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cda:	4b44      	ldr	r3, [pc, #272]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	4b41      	ldr	r3, [pc, #260]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <HAL_RCC_OscConfig+0x152>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e18a      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfe:	4b3b      	ldr	r3, [pc, #236]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4937      	ldr	r1, [pc, #220]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d12:	e03a      	b.n	8002d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d1c:	4b34      	ldr	r3, [pc, #208]	@ (8002df0 <HAL_RCC_OscConfig+0x244>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d22:	f7fe f855 	bl	8000dd0 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7fe f851 	bl	8000dd0 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e16b      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d48:	4b28      	ldr	r3, [pc, #160]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	4925      	ldr	r1, [pc, #148]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	600b      	str	r3, [r1, #0]
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5e:	4b24      	ldr	r3, [pc, #144]	@ (8002df0 <HAL_RCC_OscConfig+0x244>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe f834 	bl	8000dd0 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d6c:	f7fe f830 	bl	8000dd0 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e14a      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d036      	beq.n	8002e04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d016      	beq.n	8002dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <HAL_RCC_OscConfig+0x248>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe f814 	bl	8000dd0 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dac:	f7fe f810 	bl	8000dd0 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e12a      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_RCC_OscConfig+0x240>)
 8002dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0x200>
 8002dca:	e01b      	b.n	8002e04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dcc:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <HAL_RCC_OscConfig+0x248>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7fd fffd 	bl	8000dd0 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dd8:	e00e      	b.n	8002df8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dda:	f7fd fff9 	bl	8000dd0 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d907      	bls.n	8002df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e113      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
 8002dec:	40023800 	.word	0x40023800
 8002df0:	42470000 	.word	0x42470000
 8002df4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df8:	4b88      	ldr	r3, [pc, #544]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1ea      	bne.n	8002dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8097 	beq.w	8002f40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e16:	4b81      	ldr	r3, [pc, #516]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10f      	bne.n	8002e42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	4b7d      	ldr	r3, [pc, #500]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	4a7c      	ldr	r2, [pc, #496]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e32:	4b7a      	ldr	r3, [pc, #488]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4b77      	ldr	r3, [pc, #476]	@ (8003020 <HAL_RCC_OscConfig+0x474>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d118      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4e:	4b74      	ldr	r3, [pc, #464]	@ (8003020 <HAL_RCC_OscConfig+0x474>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a73      	ldr	r2, [pc, #460]	@ (8003020 <HAL_RCC_OscConfig+0x474>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5a:	f7fd ffb9 	bl	8000dd0 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e62:	f7fd ffb5 	bl	8000dd0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0cf      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4b6a      	ldr	r3, [pc, #424]	@ (8003020 <HAL_RCC_OscConfig+0x474>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x2ea>
 8002e88:	4b64      	ldr	r3, [pc, #400]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8c:	4a63      	ldr	r2, [pc, #396]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e94:	e01c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x324>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x30c>
 8002e9e:	4b5f      	ldr	r3, [pc, #380]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea2:	4a5e      	ldr	r2, [pc, #376]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eaa:	4b5c      	ldr	r3, [pc, #368]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eae:	4a5b      	ldr	r2, [pc, #364]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0x324>
 8002eb8:	4b58      	ldr	r3, [pc, #352]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebc:	4a57      	ldr	r2, [pc, #348]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec4:	4b55      	ldr	r3, [pc, #340]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec8:	4a54      	ldr	r2, [pc, #336]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002eca:	f023 0304 	bic.w	r3, r3, #4
 8002ece:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed8:	f7fd ff7a 	bl	8000dd0 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fd ff76 	bl	8000dd0 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e08e      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef6:	4b49      	ldr	r3, [pc, #292]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0ee      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x334>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f04:	f7fd ff64 	bl	8000dd0 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7fd ff60 	bl	8000dd0 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e078      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f22:	4b3e      	ldr	r3, [pc, #248]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ee      	bne.n	8002f0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f2e:	7dfb      	ldrb	r3, [r7, #23]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b39      	ldr	r3, [pc, #228]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	4a38      	ldr	r2, [pc, #224]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d064      	beq.n	8003012 <HAL_RCC_OscConfig+0x466>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f48:	4b34      	ldr	r3, [pc, #208]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 030c 	and.w	r3, r3, #12
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d05c      	beq.n	800300e <HAL_RCC_OscConfig+0x462>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d141      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5c:	4b31      	ldr	r3, [pc, #196]	@ (8003024 <HAL_RCC_OscConfig+0x478>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f62:	f7fd ff35 	bl	8000dd0 <HAL_GetTick>
 8002f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f68:	e008      	b.n	8002f7c <HAL_RCC_OscConfig+0x3d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f6a:	f7fd ff31 	bl	8000dd0 <HAL_GetTick>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x3d0>
          {
            return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e04b      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7c:	4b27      	ldr	r3, [pc, #156]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f0      	bne.n	8002f6a <HAL_RCC_OscConfig+0x3be>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	019b      	lsls	r3, r3, #6
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002faa:	061b      	lsls	r3, r3, #24
 8002fac:	491b      	ldr	r1, [pc, #108]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8003024 <HAL_RCC_OscConfig+0x478>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fd ff0a 	bl	8000dd0 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fd ff06 	bl	8000dd0 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e020      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	4b12      	ldr	r3, [pc, #72]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x414>
 8002fde:	e018      	b.n	8003012 <HAL_RCC_OscConfig+0x466>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe0:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <HAL_RCC_OscConfig+0x478>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fd fef3 	bl	8000dd0 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x454>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fd feef 	bl	8000dd0 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x454>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e009      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003000:	4b06      	ldr	r3, [pc, #24]	@ (800301c <HAL_RCC_OscConfig+0x470>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f0      	bne.n	8002fee <HAL_RCC_OscConfig+0x442>
 800300c:	e001      	b.n	8003012 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_RCC_OscConfig+0x468>
    }
  }
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40023800 	.word	0x40023800
 8003020:	40007000 	.word	0x40007000
 8003024:	42470060 	.word	0x42470060

08003028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0ca      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800303c:	4b67      	ldr	r3, [pc, #412]	@ (80031dc <HAL_RCC_ClockConfig+0x1b4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 030f 	and.w	r3, r3, #15
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d90c      	bls.n	8003064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b64      	ldr	r3, [pc, #400]	@ (80031dc <HAL_RCC_ClockConfig+0x1b4>)
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b62      	ldr	r3, [pc, #392]	@ (80031dc <HAL_RCC_ClockConfig+0x1b4>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0b6      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d020      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800307c:	4b58      	ldr	r3, [pc, #352]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a57      	ldr	r2, [pc, #348]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003082:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003094:	4b52      	ldr	r3, [pc, #328]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a51      	ldr	r2, [pc, #324]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800309a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800309e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a0:	4b4f      	ldr	r3, [pc, #316]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	494c      	ldr	r1, [pc, #304]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d044      	beq.n	8003148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d107      	bne.n	80030d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c6:	4b46      	ldr	r3, [pc, #280]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d119      	bne.n	8003106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e07d      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d003      	beq.n	80030e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d107      	bne.n	80030f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e6:	4b3e      	ldr	r3, [pc, #248]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e06d      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f6:	4b3a      	ldr	r3, [pc, #232]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e065      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003106:	4b36      	ldr	r3, [pc, #216]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f023 0203 	bic.w	r2, r3, #3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4933      	ldr	r1, [pc, #204]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	4313      	orrs	r3, r2
 8003116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003118:	f7fd fe5a 	bl	8000dd0 <HAL_GetTick>
 800311c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311e:	e00a      	b.n	8003136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003120:	f7fd fe56 	bl	8000dd0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800312e:	4293      	cmp	r3, r2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e04d      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	4b2a      	ldr	r3, [pc, #168]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 020c 	and.w	r2, r3, #12
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	429a      	cmp	r2, r3
 8003146:	d1eb      	bne.n	8003120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003148:	4b24      	ldr	r3, [pc, #144]	@ (80031dc <HAL_RCC_ClockConfig+0x1b4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d20c      	bcs.n	8003170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003156:	4b21      	ldr	r3, [pc, #132]	@ (80031dc <HAL_RCC_ClockConfig+0x1b4>)
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b1f      	ldr	r3, [pc, #124]	@ (80031dc <HAL_RCC_ClockConfig+0x1b4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e030      	b.n	80031d2 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d008      	beq.n	800318e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800317c:	4b18      	ldr	r3, [pc, #96]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	4915      	ldr	r1, [pc, #84]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800319a:	4b11      	ldr	r3, [pc, #68]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	490d      	ldr	r1, [pc, #52]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031ae:	f000 f81d 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 80031b2:	4602      	mov	r2, r0
 80031b4:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <HAL_RCC_ClockConfig+0x1b8>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	091b      	lsrs	r3, r3, #4
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	4909      	ldr	r1, [pc, #36]	@ (80031e4 <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	5ccb      	ldrb	r3, [r1, r3]
 80031c2:	fa22 f303 	lsr.w	r3, r2, r3
 80031c6:	4a08      	ldr	r2, [pc, #32]	@ (80031e8 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80031ca:	200f      	movs	r0, #15
 80031cc:	f7fd fdbc 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023c00 	.word	0x40023c00
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08005aec 	.word	0x08005aec
 80031e8:	20000008 	.word	0x20000008

080031ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f0:	b094      	sub	sp, #80	@ 0x50
 80031f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80031f8:	2300      	movs	r3, #0
 80031fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031fc:	2300      	movs	r3, #0
 80031fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003204:	4b79      	ldr	r3, [pc, #484]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b08      	cmp	r3, #8
 800320e:	d00d      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x40>
 8003210:	2b08      	cmp	r3, #8
 8003212:	f200 80e1 	bhi.w	80033d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x34>
 800321a:	2b04      	cmp	r3, #4
 800321c:	d003      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x3a>
 800321e:	e0db      	b.n	80033d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b73      	ldr	r3, [pc, #460]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003222:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003224:	e0db      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003226:	4b73      	ldr	r3, [pc, #460]	@ (80033f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003228:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800322a:	e0d8      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800322c:	4b6f      	ldr	r3, [pc, #444]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x200>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003234:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003236:	4b6d      	ldr	r3, [pc, #436]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d063      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003242:	4b6a      	ldr	r3, [pc, #424]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	099b      	lsrs	r3, r3, #6
 8003248:	2200      	movs	r2, #0
 800324a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800324c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800324e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003254:	633b      	str	r3, [r7, #48]	@ 0x30
 8003256:	2300      	movs	r3, #0
 8003258:	637b      	str	r3, [r7, #52]	@ 0x34
 800325a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800325e:	4622      	mov	r2, r4
 8003260:	462b      	mov	r3, r5
 8003262:	f04f 0000 	mov.w	r0, #0
 8003266:	f04f 0100 	mov.w	r1, #0
 800326a:	0159      	lsls	r1, r3, #5
 800326c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003270:	0150      	lsls	r0, r2, #5
 8003272:	4602      	mov	r2, r0
 8003274:	460b      	mov	r3, r1
 8003276:	4621      	mov	r1, r4
 8003278:	1a51      	subs	r1, r2, r1
 800327a:	6139      	str	r1, [r7, #16]
 800327c:	4629      	mov	r1, r5
 800327e:	eb63 0301 	sbc.w	r3, r3, r1
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003290:	4659      	mov	r1, fp
 8003292:	018b      	lsls	r3, r1, #6
 8003294:	4651      	mov	r1, sl
 8003296:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800329a:	4651      	mov	r1, sl
 800329c:	018a      	lsls	r2, r1, #6
 800329e:	4651      	mov	r1, sl
 80032a0:	ebb2 0801 	subs.w	r8, r2, r1
 80032a4:	4659      	mov	r1, fp
 80032a6:	eb63 0901 	sbc.w	r9, r3, r1
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032be:	4690      	mov	r8, r2
 80032c0:	4699      	mov	r9, r3
 80032c2:	4623      	mov	r3, r4
 80032c4:	eb18 0303 	adds.w	r3, r8, r3
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	462b      	mov	r3, r5
 80032cc:	eb49 0303 	adc.w	r3, r9, r3
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032de:	4629      	mov	r1, r5
 80032e0:	024b      	lsls	r3, r1, #9
 80032e2:	4621      	mov	r1, r4
 80032e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032e8:	4621      	mov	r1, r4
 80032ea:	024a      	lsls	r2, r1, #9
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f2:	2200      	movs	r2, #0
 80032f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032fc:	f7fd fb8a 	bl	8000a14 <__aeabi_uldivmod>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	4613      	mov	r3, r2
 8003306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003308:	e058      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800330a:	4b38      	ldr	r3, [pc, #224]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x200>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	099b      	lsrs	r3, r3, #6
 8003310:	2200      	movs	r2, #0
 8003312:	4618      	mov	r0, r3
 8003314:	4611      	mov	r1, r2
 8003316:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800331a:	623b      	str	r3, [r7, #32]
 800331c:	2300      	movs	r3, #0
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003320:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003324:	4642      	mov	r2, r8
 8003326:	464b      	mov	r3, r9
 8003328:	f04f 0000 	mov.w	r0, #0
 800332c:	f04f 0100 	mov.w	r1, #0
 8003330:	0159      	lsls	r1, r3, #5
 8003332:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003336:	0150      	lsls	r0, r2, #5
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4641      	mov	r1, r8
 800333e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003342:	4649      	mov	r1, r9
 8003344:	eb63 0b01 	sbc.w	fp, r3, r1
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003354:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003358:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800335c:	ebb2 040a 	subs.w	r4, r2, sl
 8003360:	eb63 050b 	sbc.w	r5, r3, fp
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	00eb      	lsls	r3, r5, #3
 800336e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003372:	00e2      	lsls	r2, r4, #3
 8003374:	4614      	mov	r4, r2
 8003376:	461d      	mov	r5, r3
 8003378:	4643      	mov	r3, r8
 800337a:	18e3      	adds	r3, r4, r3
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	464b      	mov	r3, r9
 8003380:	eb45 0303 	adc.w	r3, r5, r3
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003392:	4629      	mov	r1, r5
 8003394:	028b      	lsls	r3, r1, #10
 8003396:	4621      	mov	r1, r4
 8003398:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800339c:	4621      	mov	r1, r4
 800339e:	028a      	lsls	r2, r1, #10
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033a6:	2200      	movs	r2, #0
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	61fa      	str	r2, [r7, #28]
 80033ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b0:	f7fd fb30 	bl	8000a14 <__aeabi_uldivmod>
 80033b4:	4602      	mov	r2, r0
 80033b6:	460b      	mov	r3, r1
 80033b8:	4613      	mov	r3, r2
 80033ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033bc:	4b0b      	ldr	r3, [pc, #44]	@ (80033ec <HAL_RCC_GetSysClockFreq+0x200>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	3301      	adds	r3, #1
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80033cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033d6:	e002      	b.n	80033de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b05      	ldr	r3, [pc, #20]	@ (80033f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3750      	adds	r7, #80	@ 0x50
 80033e4:	46bd      	mov	sp, r7
 80033e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	00f42400 	.word	0x00f42400
 80033f4:	007a1200 	.word	0x007a1200

080033f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033fc:	4b03      	ldr	r3, [pc, #12]	@ (800340c <HAL_RCC_GetHCLKFreq+0x14>)
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000008 	.word	0x20000008

08003410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003414:	f7ff fff0 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8003418:	4602      	mov	r2, r0
 800341a:	4b05      	ldr	r3, [pc, #20]	@ (8003430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	0a9b      	lsrs	r3, r3, #10
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	4903      	ldr	r1, [pc, #12]	@ (8003434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003426:	5ccb      	ldrb	r3, [r1, r3]
 8003428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800342c:	4618      	mov	r0, r3
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40023800 	.word	0x40023800
 8003434:	08005afc 	.word	0x08005afc

08003438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800343c:	f7ff ffdc 	bl	80033f8 <HAL_RCC_GetHCLKFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	@ (8003458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	0b5b      	lsrs	r3, r3, #13
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4903      	ldr	r1, [pc, #12]	@ (800345c <HAL_RCC_GetPCLK2Freq+0x24>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	08005afc 	.word	0x08005afc

08003460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b02      	cmp	r3, #2
 8003474:	d122      	bne.n	80034bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b02      	cmp	r3, #2
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0202 	mvn.w	r2, #2
 800348c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f8f8 	bl	8003698 <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f8ea 	bl	8003684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f8fb 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d122      	bne.n	8003510 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d11b      	bne.n	8003510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0204 	mvn.w	r2, #4
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8ce 	bl	8003698 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8c0 	bl	8003684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f8d1 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b08      	cmp	r3, #8
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b08      	cmp	r3, #8
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0208 	mvn.w	r2, #8
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2204      	movs	r2, #4
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8a4 	bl	8003698 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f896 	bl	8003684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f8a7 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b10      	cmp	r3, #16
 8003570:	d122      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b10      	cmp	r3, #16
 800357e:	d11b      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0210 	mvn.w	r2, #16
 8003588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2208      	movs	r2, #8
 800358e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f87a 	bl	8003698 <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f86c 	bl	8003684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f87d 	bl	80036ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d10e      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0201 	mvn.w	r2, #1
 80035dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f846 	bl	8003670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ee:	2b80      	cmp	r3, #128	@ 0x80
 80035f0:	d10e      	bne.n	8003610 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fc:	2b80      	cmp	r3, #128	@ 0x80
 80035fe:	d107      	bne.n	8003610 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f86c 	bl	80036e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361a:	2b40      	cmp	r3, #64	@ 0x40
 800361c:	d10e      	bne.n	800363c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003628:	2b40      	cmp	r3, #64	@ 0x40
 800362a:	d107      	bne.n	800363c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f842 	bl	80036c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	d10e      	bne.n	8003668 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b20      	cmp	r3, #32
 8003656:	d107      	bne.n	8003668 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0220 	mvn.w	r2, #32
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f836 	bl	80036d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e03f      	b.n	800378e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f837 	bl	8003796 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2224      	movs	r2, #36	@ 0x24
 800372c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800373e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fb9b 	bl	8003e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b088      	sub	sp, #32
 80037ae:	af02      	add	r7, sp, #8
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	603b      	str	r3, [r7, #0]
 80037b6:	4613      	mov	r3, r2
 80037b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	f040 8083 	bne.w	80038d2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <HAL_UART_Transmit+0x2e>
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e07b      	b.n	80038d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_UART_Transmit+0x40>
 80037e6:	2302      	movs	r3, #2
 80037e8:	e074      	b.n	80038d4 <HAL_UART_Transmit+0x12a>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2221      	movs	r2, #33	@ 0x21
 80037fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003800:	f7fd fae6 	bl	8000dd0 <HAL_GetTick>
 8003804:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	88fa      	ldrh	r2, [r7, #6]
 800380a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003812:	e042      	b.n	800389a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	84da      	strh	r2, [r3, #38]	@ 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800382a:	d122      	bne.n	8003872 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	2200      	movs	r2, #0
 8003834:	2180      	movs	r1, #128	@ 0x80
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f9b4 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e046      	b.n	80038d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003858:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	3302      	adds	r3, #2
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	e017      	b.n	800389a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3301      	adds	r3, #1
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	e013      	b.n	800389a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	2180      	movs	r1, #128	@ 0x80
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f991 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e023      	b.n	80038d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	60ba      	str	r2, [r7, #8]
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1b7      	bne.n	8003814 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2200      	movs	r2, #0
 80038ac:	2140      	movs	r1, #64	@ 0x40
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f978 	bl	8003ba4 <UART_WaitOnFlagUntilTimeout>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e00a      	b.n	80038d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	4613      	mov	r3, r2
 80038e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d140      	bne.n	8003978 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <HAL_UART_Receive_IT+0x26>
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e039      	b.n	800397a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_UART_Receive_IT+0x38>
 8003910:	2302      	movs	r3, #2
 8003912:	e032      	b.n	800397a <HAL_UART_Receive_IT+0x9e>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    huart->pRxBuffPtr = pData;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	629a      	str	r2, [r3, #40]	@ 0x28
    huart->RxXferSize = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	88fa      	ldrh	r2, [r7, #6]
 8003926:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	63da      	str	r2, [r3, #60]	@ 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2222      	movs	r2, #34	@ 0x22
 8003938:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003952:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0220 	orr.w	r2, r2, #32
 8003972:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003978:	2302      	movs	r3, #2
  }
}
 800397a:	4618      	mov	r0, r3
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
	...

08003988 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10d      	bne.n	80039da <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_UART_IRQHandler+0x52>
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f9d0 	bl	8003d78 <UART_Receive_IT>
      return;
 80039d8:	e0cb      	b.n	8003b72 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80ab 	beq.w	8003b38 <HAL_UART_IRQHandler+0x1b0>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d105      	bne.n	80039f8 <HAL_UART_IRQHandler+0x70>
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80a0 	beq.w	8003b38 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00a      	beq.n	8003a18 <HAL_UART_IRQHandler+0x90>
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a10:	f043 0201 	orr.w	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_UART_IRQHandler+0xb0>
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a30:	f043 0202 	orr.w	r2, r3, #2
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_UART_IRQHandler+0xd0>
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a50:	f043 0204 	orr.w	r2, r3, #4
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_UART_IRQHandler+0xf0>
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d005      	beq.n	8003a78 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a70:	f043 0208 	orr.w	r2, r3, #8
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d077      	beq.n	8003b70 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d007      	beq.n	8003a9a <HAL_UART_IRQHandler+0x112>
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f000 f96f 	bl	8003d78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aa4:	2b40      	cmp	r3, #64	@ 0x40
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2301      	moveq	r3, #1
 8003aaa:	2300      	movne	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x13a>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d031      	beq.n	8003b26 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8b8 	bl	8003c38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad2:	2b40      	cmp	r3, #64	@ 0x40
 8003ad4:	d123      	bne.n	8003b1e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ae4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d013      	beq.n	8003b16 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af2:	4a21      	ldr	r2, [pc, #132]	@ (8003b78 <HAL_UART_IRQHandler+0x1f0>)
 8003af4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd faa9 	bl	8001052 <HAL_DMA_Abort_IT>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d016      	beq.n	8003b34 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b10:	4610      	mov	r0, r2
 8003b12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	e00e      	b.n	8003b34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f83a 	bl	8003b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	e00a      	b.n	8003b34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f836 	bl	8003b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b24:	e006      	b.n	8003b34 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f832 	bl	8003b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
    return;
 8003b32:	e01d      	b.n	8003b70 <HAL_UART_IRQHandler+0x1e8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	bf00      	nop
    return;
 8003b36:	e01b      	b.n	8003b70 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_UART_IRQHandler+0x1cc>
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f8a5 	bl	8003c9c <UART_Transmit_IT>
    return;
 8003b52:	e00e      	b.n	8003b72 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_UART_IRQHandler+0x1ea>
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d004      	beq.n	8003b72 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f8ed 	bl	8003d48 <UART_EndTransmit_IT>
    return;
 8003b6e:	e000      	b.n	8003b72 <HAL_UART_IRQHandler+0x1ea>
    return;
 8003b70:	bf00      	nop
  }
}
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	08003c75 	.word	0x08003c75

08003b7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb4:	e02c      	b.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbc:	d028      	beq.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bc4:	f7fd f904 	bl	8000dd0 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d21d      	bcs.n	8003c10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8003be2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e00f      	b.n	8003c30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	461a      	mov	r2, r3
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d0c3      	beq.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8003c4e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f7ff ff7e 	bl	8003b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b21      	cmp	r3, #33	@ 0x21
 8003cae:	d144      	bne.n	8003d3a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cb8:	d11a      	bne.n	8003cf0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	1c9a      	adds	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	621a      	str	r2, [r3, #32]
 8003ce2:	e00e      	b.n	8003d02 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	621a      	str	r2, [r3, #32]
 8003cee:	e008      	b.n	8003d02 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	1c59      	adds	r1, r3, #1
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6211      	str	r1, [r2, #32]
 8003cfa:	781a      	ldrb	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4619      	mov	r1, r3
 8003d10:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10f      	bne.n	8003d36 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e000      	b.n	8003d3c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
  }
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f7ff ff07 	bl	8003b7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b22      	cmp	r3, #34	@ 0x22
 8003d8a:	d171      	bne.n	8003e70 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d94:	d123      	bne.n	8003dde <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10e      	bne.n	8003dc2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dba:	1c9a      	adds	r2, r3, #2
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dc0:	e029      	b.n	8003e16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ddc:	e01b      	b.n	8003e16 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10a      	bne.n	8003dfc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6858      	ldr	r0, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	1c59      	adds	r1, r3, #1
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	6291      	str	r1, [r2, #40]	@ 0x28
 8003df6:	b2c2      	uxtb	r2, r0
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e00c      	b.n	8003e16 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	1c58      	adds	r0, r3, #1
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	6288      	str	r0, [r1, #40]	@ 0x28
 8003e0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	4619      	mov	r1, r3
 8003e24:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d120      	bne.n	8003e6c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0220 	bic.w	r2, r2, #32
 8003e38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f001 fa42 	bl	80052ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e002      	b.n	8003e72 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e000      	b.n	8003e72 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003e70:	2302      	movs	r3, #2
  }
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e7c:	b5b0      	push	{r4, r5, r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8003ebc:	f023 030c 	bic.w	r3, r3, #12
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	68f9      	ldr	r1, [r7, #12]
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699a      	ldr	r2, [r3, #24]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ee8:	f040 80e4 	bne.w	80040b4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4aab      	ldr	r2, [pc, #684]	@ (80041a0 <UART_SetConfig+0x324>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <UART_SetConfig+0x84>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4aaa      	ldr	r2, [pc, #680]	@ (80041a4 <UART_SetConfig+0x328>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d16c      	bne.n	8003fda <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f00:	f7ff fa9a 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	009a      	lsls	r2, r3, #2
 8003f0e:	441a      	add	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1a:	4aa3      	ldr	r2, [pc, #652]	@ (80041a8 <UART_SetConfig+0x32c>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	011c      	lsls	r4, r3, #4
 8003f24:	f7ff fa88 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	009a      	lsls	r2, r3, #2
 8003f32:	441a      	add	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f3e:	f7ff fa7b 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 8003f42:	4602      	mov	r2, r0
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	009a      	lsls	r2, r3, #2
 8003f4c:	441a      	add	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f58:	4a93      	ldr	r2, [pc, #588]	@ (80041a8 <UART_SetConfig+0x32c>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	2264      	movs	r2, #100	@ 0x64
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	1aeb      	subs	r3, r5, r3
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	3332      	adds	r3, #50	@ 0x32
 8003f6c:	4a8e      	ldr	r2, [pc, #568]	@ (80041a8 <UART_SetConfig+0x32c>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f7a:	441c      	add	r4, r3
 8003f7c:	f7ff fa5c 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009a      	lsls	r2, r3, #2
 8003f8a:	441a      	add	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	005b      	lsls	r3, r3, #1
 8003f92:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f96:	f7ff fa4f 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009a      	lsls	r2, r3, #2
 8003fa4:	441a      	add	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb0:	4a7d      	ldr	r2, [pc, #500]	@ (80041a8 <UART_SetConfig+0x32c>)
 8003fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb6:	095b      	lsrs	r3, r3, #5
 8003fb8:	2264      	movs	r2, #100	@ 0x64
 8003fba:	fb02 f303 	mul.w	r3, r2, r3
 8003fbe:	1aeb      	subs	r3, r5, r3
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	3332      	adds	r3, #50	@ 0x32
 8003fc4:	4a78      	ldr	r2, [pc, #480]	@ (80041a8 <UART_SetConfig+0x32c>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	f003 0207 	and.w	r2, r3, #7
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4422      	add	r2, r4
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	e154      	b.n	8004284 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003fda:	f7ff fa19 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009a      	lsls	r2, r3, #2
 8003fe8:	441a      	add	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff4:	4a6c      	ldr	r2, [pc, #432]	@ (80041a8 <UART_SetConfig+0x32c>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	011c      	lsls	r4, r3, #4
 8003ffe:	f7ff fa07 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 8004002:	4602      	mov	r2, r0
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009a      	lsls	r2, r3, #2
 800400c:	441a      	add	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fbb2 f5f3 	udiv	r5, r2, r3
 8004018:	f7ff f9fa 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 800401c:	4602      	mov	r2, r0
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009a      	lsls	r2, r3, #2
 8004026:	441a      	add	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004032:	4a5d      	ldr	r2, [pc, #372]	@ (80041a8 <UART_SetConfig+0x32c>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	2264      	movs	r2, #100	@ 0x64
 800403c:	fb02 f303 	mul.w	r3, r2, r3
 8004040:	1aeb      	subs	r3, r5, r3
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	3332      	adds	r3, #50	@ 0x32
 8004046:	4a58      	ldr	r2, [pc, #352]	@ (80041a8 <UART_SetConfig+0x32c>)
 8004048:	fba2 2303 	umull	r2, r3, r2, r3
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004054:	441c      	add	r4, r3
 8004056:	f7ff f9db 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 800405a:	4602      	mov	r2, r0
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	009a      	lsls	r2, r3, #2
 8004064:	441a      	add	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004070:	f7ff f9ce 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 8004074:	4602      	mov	r2, r0
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	009a      	lsls	r2, r3, #2
 800407e:	441a      	add	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	fbb2 f3f3 	udiv	r3, r2, r3
 800408a:	4a47      	ldr	r2, [pc, #284]	@ (80041a8 <UART_SetConfig+0x32c>)
 800408c:	fba2 2303 	umull	r2, r3, r2, r3
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	2264      	movs	r2, #100	@ 0x64
 8004094:	fb02 f303 	mul.w	r3, r2, r3
 8004098:	1aeb      	subs	r3, r5, r3
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	3332      	adds	r3, #50	@ 0x32
 800409e:	4a42      	ldr	r2, [pc, #264]	@ (80041a8 <UART_SetConfig+0x32c>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	f003 0207 	and.w	r2, r3, #7
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4422      	add	r2, r4
 80040b0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80040b2:	e0e7      	b.n	8004284 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a39      	ldr	r2, [pc, #228]	@ (80041a0 <UART_SetConfig+0x324>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d004      	beq.n	80040c8 <UART_SetConfig+0x24c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a38      	ldr	r2, [pc, #224]	@ (80041a4 <UART_SetConfig+0x328>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d171      	bne.n	80041ac <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80040c8:	f7ff f9b6 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 80040cc:	4602      	mov	r2, r0
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	009a      	lsls	r2, r3, #2
 80040d6:	441a      	add	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e2:	4a31      	ldr	r2, [pc, #196]	@ (80041a8 <UART_SetConfig+0x32c>)
 80040e4:	fba2 2303 	umull	r2, r3, r2, r3
 80040e8:	095b      	lsrs	r3, r3, #5
 80040ea:	011c      	lsls	r4, r3, #4
 80040ec:	f7ff f9a4 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	009a      	lsls	r2, r3, #2
 80040fa:	441a      	add	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	fbb2 f5f3 	udiv	r5, r2, r3
 8004106:	f7ff f997 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 800410a:	4602      	mov	r2, r0
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009a      	lsls	r2, r3, #2
 8004114:	441a      	add	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004120:	4a21      	ldr	r2, [pc, #132]	@ (80041a8 <UART_SetConfig+0x32c>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2264      	movs	r2, #100	@ 0x64
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	1aeb      	subs	r3, r5, r3
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	3332      	adds	r3, #50	@ 0x32
 8004134:	4a1c      	ldr	r2, [pc, #112]	@ (80041a8 <UART_SetConfig+0x32c>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004140:	441c      	add	r4, r3
 8004142:	f7ff f979 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 8004146:	4602      	mov	r2, r0
 8004148:	4613      	mov	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	009a      	lsls	r2, r3, #2
 8004150:	441a      	add	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	fbb2 f5f3 	udiv	r5, r2, r3
 800415c:	f7ff f96c 	bl	8003438 <HAL_RCC_GetPCLK2Freq>
 8004160:	4602      	mov	r2, r0
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009a      	lsls	r2, r3, #2
 800416a:	441a      	add	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	fbb2 f3f3 	udiv	r3, r2, r3
 8004176:	4a0c      	ldr	r2, [pc, #48]	@ (80041a8 <UART_SetConfig+0x32c>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	2264      	movs	r2, #100	@ 0x64
 8004180:	fb02 f303 	mul.w	r3, r2, r3
 8004184:	1aeb      	subs	r3, r5, r3
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	3332      	adds	r3, #50	@ 0x32
 800418a:	4a07      	ldr	r2, [pc, #28]	@ (80041a8 <UART_SetConfig+0x32c>)
 800418c:	fba2 2303 	umull	r2, r3, r2, r3
 8004190:	095b      	lsrs	r3, r3, #5
 8004192:	f003 020f 	and.w	r2, r3, #15
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4422      	add	r2, r4
 800419c:	609a      	str	r2, [r3, #8]
 800419e:	e071      	b.n	8004284 <UART_SetConfig+0x408>
 80041a0:	40011000 	.word	0x40011000
 80041a4:	40011400 	.word	0x40011400
 80041a8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80041ac:	f7ff f930 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 80041b0:	4602      	mov	r2, r0
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	009a      	lsls	r2, r3, #2
 80041ba:	441a      	add	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c6:	4a31      	ldr	r2, [pc, #196]	@ (800428c <UART_SetConfig+0x410>)
 80041c8:	fba2 2303 	umull	r2, r3, r2, r3
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	011c      	lsls	r4, r3, #4
 80041d0:	f7ff f91e 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 80041d4:	4602      	mov	r2, r0
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	009a      	lsls	r2, r3, #2
 80041de:	441a      	add	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	fbb2 f5f3 	udiv	r5, r2, r3
 80041ea:	f7ff f911 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 80041ee:	4602      	mov	r2, r0
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	009a      	lsls	r2, r3, #2
 80041f8:	441a      	add	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	4a21      	ldr	r2, [pc, #132]	@ (800428c <UART_SetConfig+0x410>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2264      	movs	r2, #100	@ 0x64
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	1aeb      	subs	r3, r5, r3
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	3332      	adds	r3, #50	@ 0x32
 8004218:	4a1c      	ldr	r2, [pc, #112]	@ (800428c <UART_SetConfig+0x410>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004224:	441c      	add	r4, r3
 8004226:	f7ff f8f3 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 800422a:	4602      	mov	r2, r0
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	009a      	lsls	r2, r3, #2
 8004234:	441a      	add	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004240:	f7ff f8e6 	bl	8003410 <HAL_RCC_GetPCLK1Freq>
 8004244:	4602      	mov	r2, r0
 8004246:	4613      	mov	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	009a      	lsls	r2, r3, #2
 800424e:	441a      	add	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	fbb2 f3f3 	udiv	r3, r2, r3
 800425a:	4a0c      	ldr	r2, [pc, #48]	@ (800428c <UART_SetConfig+0x410>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	2264      	movs	r2, #100	@ 0x64
 8004264:	fb02 f303 	mul.w	r3, r2, r3
 8004268:	1aeb      	subs	r3, r5, r3
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	3332      	adds	r3, #50	@ 0x32
 800426e:	4a07      	ldr	r2, [pc, #28]	@ (800428c <UART_SetConfig+0x410>)
 8004270:	fba2 2303 	umull	r2, r3, r2, r3
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	f003 020f 	and.w	r2, r3, #15
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4422      	add	r2, r4
 8004280:	609a      	str	r2, [r3, #8]
}
 8004282:	e7ff      	b.n	8004284 <UART_SetConfig+0x408>
 8004284:	bf00      	nop
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bdb0      	pop	{r4, r5, r7, pc}
 800428c:	51eb851f 	.word	0x51eb851f

08004290 <SystemClock_Config>:
#include "SystemClock.h"

HAL_StatusTypeDef SystemClock_Config(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b094      	sub	sp, #80	@ 0x50
 8004294:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef status;

  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	4b27      	ldr	r3, [pc, #156]	@ (8004338 <SystemClock_Config+0xa8>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	4a26      	ldr	r2, [pc, #152]	@ (8004338 <SystemClock_Config+0xa8>)
 80042a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80042a6:	4b24      	ldr	r3, [pc, #144]	@ (8004338 <SystemClock_Config+0xa8>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ae:	607b      	str	r3, [r7, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80042b2:	2300      	movs	r3, #0
 80042b4:	603b      	str	r3, [r7, #0]
 80042b6:	4b21      	ldr	r3, [pc, #132]	@ (800433c <SystemClock_Config+0xac>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80042be:	4a1f      	ldr	r2, [pc, #124]	@ (800433c <SystemClock_Config+0xac>)
 80042c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	4b1d      	ldr	r3, [pc, #116]	@ (800433c <SystemClock_Config+0xac>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	683b      	ldr	r3, [r7, #0]

  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80042d2:	2302      	movs	r3, #2
 80042d4:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042d6:	2301      	movs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 80042da:	2310      	movs	r3, #16
 80042dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042de:	2302      	movs	r3, #2
 80042e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80042e2:	2300      	movs	r3, #0
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = 16;
 80042e6:	2310      	movs	r3, #16
 80042e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 336;
 80042ea:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80042ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80042f0:	2304      	movs	r3, #4
 80042f2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80042f4:	2307      	movs	r3, #7
 80042f6:	637b      	str	r3, [r7, #52]	@ 0x34
  status = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80042f8:	f107 0308 	add.w	r3, r7, #8
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fe fc55 	bl	8002bac <HAL_RCC_OscConfig>
 8004302:	4603      	mov	r3, r0
 8004304:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004308:	230f      	movs	r3, #15
 800430a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800430c:	2302      	movs	r3, #2
 800430e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004310:	2300      	movs	r3, #0
 8004312:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004318:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800431a:	2300      	movs	r3, #0
 800431c:	64bb      	str	r3, [r7, #72]	@ 0x48
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800431e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004322:	2102      	movs	r1, #2
 8004324:	4618      	mov	r0, r3
 8004326:	f7fe fe7f 	bl	8003028 <HAL_RCC_ClockConfig>

  return status;
 800432a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f

}
 800432e:	4618      	mov	r0, r3
 8004330:	3750      	adds	r7, #80	@ 0x50
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40023800 	.word	0x40023800
 800433c:	40007000 	.word	0x40007000

08004340 <dxl_LED>:
    HAL_Delay(DXL_DELAY);
#endif
}
//==============================================================
void dxl_LED(int id, char val )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af02      	add	r7, sp, #8
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
	dxl_sendPacket(id, INST_WRITE, 3, DXL_BYTE_1(XL_LED), DXL_BYTE_2(XL_LED), val );
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	2300      	movs	r3, #0
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	2341      	movs	r3, #65	@ 0x41
 8004356:	2203      	movs	r2, #3
 8004358:	2103      	movs	r1, #3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f85c 	bl	8004418 <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 8004360:	200a      	movs	r0, #10
 8004362:	f7fc fd41 	bl	8000de8 <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <dxl_torque>:
//==============================================================
void dxl_torque(int id, char val)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af02      	add	r7, sp, #8
 8004374:	6078      	str	r0, [r7, #4]
 8004376:	460b      	mov	r3, r1
 8004378:	70fb      	strb	r3, [r7, #3]
	dxl_sendPacket(id, INST_WRITE, 3, DXL_BYTE_1(XL_TORQUE), DXL_BYTE_2(XL_TORQUE), val );
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	2300      	movs	r3, #0
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	2340      	movs	r3, #64	@ 0x40
 8004384:	2203      	movs	r2, #3
 8004386:	2103      	movs	r1, #3
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f845 	bl	8004418 <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 800438e:	200a      	movs	r0, #10
 8004390:	f7fc fd2a 	bl	8000de8 <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <dxl_setOperatingMode>:
//==============================================================
void dxl_setOperatingMode(int id, char val)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af02      	add	r7, sp, #8
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	460b      	mov	r3, r1
 80043a6:	70fb      	strb	r3, [r7, #3]
	dxl_sendPacket(id, INST_WRITE, 3, DXL_BYTE_1(XL_OPERATING_MODE), DXL_BYTE_2(XL_OPERATING_MODE), val );
 80043a8:	78fb      	ldrb	r3, [r7, #3]
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	2300      	movs	r3, #0
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	230b      	movs	r3, #11
 80043b2:	2203      	movs	r2, #3
 80043b4:	2103      	movs	r1, #3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f82e 	bl	8004418 <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 80043bc:	200a      	movs	r0, #10
 80043be:	f7fc fd13 	bl	8000de8 <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <dxl_setGoalVelocity>:
#endif
}

//==============================================================
void dxl_setGoalVelocity(int id, int val)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b088      	sub	sp, #32
 80043ce:	af06      	add	r7, sp, #24
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 80043d8:	461a      	mov	r2, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 80043e0:	4619      	mov	r1, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 80043e8:	4618      	mov	r0, r3
					DXL_BYTE_1(val), DXL_BYTE_2(val), DXL_BYTE_3(val), DXL_BYTE_4(val) );
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	0e1b      	lsrs	r3, r3, #24
 80043ee:	b2db      	uxtb	r3, r3
	dxl_sendPacket(id, INST_WRITE, 6, DXL_BYTE_1(XL_GOAL_VELOCITY), DXL_BYTE_2(XL_GOAL_VELOCITY),
 80043f0:	9304      	str	r3, [sp, #16]
 80043f2:	9003      	str	r0, [sp, #12]
 80043f4:	9102      	str	r1, [sp, #8]
 80043f6:	9201      	str	r2, [sp, #4]
 80043f8:	2300      	movs	r3, #0
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	2368      	movs	r3, #104	@ 0x68
 80043fe:	2206      	movs	r2, #6
 8004400:	2103      	movs	r1, #3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f808 	bl	8004418 <dxl_sendPacket>
	HAL_Delay(DXL_DELAY);
 8004408:	200a      	movs	r0, #10
 800440a:	f7fc fced 	bl	8000de8 <HAL_Delay>
#if DXL_DEBUG==1
	dxl_readPacket();
	HAL_Delay(DXL_DELAY);
#endif
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <dxl_sendPacket>:
	HAL_Delay(DXL_DELAY);
#endif
}
//==============================================================
int dxl_sendPacket(int id, int instruction, int parameter_data_size, ...)
{
 8004418:	b40c      	push	{r2, r3}
 800441a:	b580      	push	{r7, lr}
 800441c:	b094      	sub	sp, #80	@ 0x50
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
	uint8_t frame_to_write[50];
	uint16_t crc;
	uint32_t length=3+parameter_data_size;
 8004424:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004426:	3303      	adds	r3, #3
 8004428:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t arg;

	frame_to_write[0] = 0xFF;
 800442a:	23ff      	movs	r3, #255	@ 0xff
 800442c:	743b      	strb	r3, [r7, #16]
	frame_to_write[1] = 0xFF;
 800442e:	23ff      	movs	r3, #255	@ 0xff
 8004430:	747b      	strb	r3, [r7, #17]
	frame_to_write[2] = 0xFD;
 8004432:	23fd      	movs	r3, #253	@ 0xfd
 8004434:	74bb      	strb	r3, [r7, #18]
	frame_to_write[3] = 0x00;	// RESERVED
 8004436:	2300      	movs	r3, #0
 8004438:	74fb      	strb	r3, [r7, #19]
	frame_to_write[4] = id;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	753b      	strb	r3, [r7, #20]
	frame_to_write[5] = length&0xFF;		// length_LB
 8004440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004442:	b2db      	uxtb	r3, r3
 8004444:	757b      	strb	r3, [r7, #21]
	frame_to_write[6] = (length>>8)&0xFF;		// length_HB
 8004446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004448:	0a1b      	lsrs	r3, r3, #8
 800444a:	b2db      	uxtb	r3, r3
 800444c:	75bb      	strb	r3, [r7, #22]
	frame_to_write[7] = instruction;		// Instruction : Write
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	75fb      	strb	r3, [r7, #23]

    va_list args;
    va_start(args, parameter_data_size);
 8004454:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004458:	60fb      	str	r3, [r7, #12]
	for(int i=0 ; i < parameter_data_size ; i++ )
 800445a:	2300      	movs	r3, #0
 800445c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800445e:	e010      	b.n	8004482 <dxl_sendPacket+0x6a>
	{
	arg = va_arg(args, int);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1d1a      	adds	r2, r3, #4
 8004464:	60fa      	str	r2, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
	frame_to_write[8+i]= arg;
 800446c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800446e:	3308      	adds	r3, #8
 8004470:	3350      	adds	r3, #80	@ 0x50
 8004472:	443b      	add	r3, r7
 8004474:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8004478:	f803 2c40 	strb.w	r2, [r3, #-64]
	for(int i=0 ; i < parameter_data_size ; i++ )
 800447c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800447e:	3301      	adds	r3, #1
 8004480:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004482:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004484:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004486:	429a      	cmp	r2, r3
 8004488:	dbea      	blt.n	8004460 <dxl_sendPacket+0x48>
	}
	crc = dxl_updateCRC(0,frame_to_write,8+parameter_data_size);
 800448a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800448c:	b29b      	uxth	r3, r3
 800448e:	3308      	adds	r3, #8
 8004490:	b29a      	uxth	r2, r3
 8004492:	f107 0310 	add.w	r3, r7, #16
 8004496:	4619      	mov	r1, r3
 8004498:	2000      	movs	r0, #0
 800449a:	f000 f837 	bl	800450c <dxl_updateCRC>
 800449e:	4603      	mov	r3, r0
 80044a0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	frame_to_write[8+parameter_data_size]= (uint8_t) ( crc & 0xFF );
 80044a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044a6:	3308      	adds	r3, #8
 80044a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	3350      	adds	r3, #80	@ 0x50
 80044b0:	443b      	add	r3, r7
 80044b2:	f803 2c40 	strb.w	r2, [r3, #-64]
	frame_to_write[9+parameter_data_size]= (uint8_t) ( (crc>>8) & 0xFF );
 80044b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80044ba:	0a1b      	lsrs	r3, r3, #8
 80044bc:	b29a      	uxth	r2, r3
 80044be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044c0:	3309      	adds	r3, #9
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	3350      	adds	r3, #80	@ 0x50
 80044c6:	443b      	add	r3, r7
 80044c8:	f803 2c40 	strb.w	r2, [r3, #-64]
	va_end(args);

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 80044cc:	2201      	movs	r2, #1
 80044ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80044d2:	480d      	ldr	r0, [pc, #52]	@ (8004508 <dxl_sendPacket+0xf0>)
 80044d4:	f7fc ff8a 	bl	80013ec <HAL_GPIO_WritePin>
	sendFrame(frame_to_write,parameter_data_size+2+8);
 80044d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044da:	f103 020a 	add.w	r2, r3, #10
 80044de:	f107 0310 	add.w	r3, r7, #16
 80044e2:	4611      	mov	r1, r2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 ff5d 	bl	80053a4 <sendFrame>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80044f0:	4805      	ldr	r0, [pc, #20]	@ (8004508 <dxl_sendPacket+0xf0>)
 80044f2:	f7fc ff7b 	bl	80013ec <HAL_GPIO_WritePin>

	return 0;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3750      	adds	r7, #80	@ 0x50
 80044fc:	46bd      	mov	sp, r7
 80044fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004502:	b002      	add	sp, #8
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	40020000 	.word	0x40020000

0800450c <dxl_updateCRC>:
//==============================================================
uint16_t dxl_updateCRC(uint16_t crc_accum, uint8_t *data_blk_ptr, uint16_t data_blk_size)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8004512:	af00      	add	r7, sp, #0
 8004514:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004518:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800451c:	6019      	str	r1, [r3, #0]
 800451e:	4611      	mov	r1, r2
 8004520:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004524:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8004528:	4602      	mov	r2, r0
 800452a:	801a      	strh	r2, [r3, #0]
 800452c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004530:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8004534:	460a      	mov	r2, r1
 8004536:	801a      	strh	r2, [r3, #0]
	uint16_t i, j;
	uint16_t crc_table[256] = {0x0000, 0x8005, 0x800F, 0x000A, 0x801B, 0x001E, 0x0014, 0x8011,
 8004538:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800453c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004540:	4a29      	ldr	r2, [pc, #164]	@ (80045e8 <dxl_updateCRC+0xdc>)
 8004542:	4618      	mov	r0, r3
 8004544:	4611      	mov	r1, r2
 8004546:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800454a:	461a      	mov	r2, r3
 800454c:	f001 f970 	bl	8005830 <memcpy>
	                                0x02A8, 0x82AD, 0x82A7, 0x02A2, 0x82E3, 0x02E6, 0x02EC, 0x82E9, 0x02F8, 0x82FD, 0x82F7, 0x02F2, 0x02D0, 0x82D5,
	                                0x82DF, 0x02DA, 0x82CB, 0x02CE, 0x02C4, 0x82C1, 0x8243, 0x0246, 0x024C, 0x8249, 0x0258, 0x825D, 0x8257, 0x0252,
	                                0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261, 0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E,
	                                0x0234, 0x8231, 0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202 };

	for(j = 0; j < data_blk_size; j++)
 8004550:	2300      	movs	r3, #0
 8004552:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 8004556:	e033      	b.n	80045c0 <dxl_updateCRC+0xb4>
	{
		i = ((uint16_t)(crc_accum >> 8) ^ *data_blk_ptr++) & 0xFF;
 8004558:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800455c:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8004560:	881b      	ldrh	r3, [r3, #0]
 8004562:	0a1b      	lsrs	r3, r3, #8
 8004564:	b29a      	uxth	r2, r3
 8004566:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800456a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 8004574:	f5a1 7104 	sub.w	r1, r1, #528	@ 0x210
 8004578:	1c58      	adds	r0, r3, #1
 800457a:	6008      	str	r0, [r1, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	4053      	eors	r3, r2
 8004580:	b29b      	uxth	r3, r3
 8004582:	b2db      	uxtb	r3, r3
 8004584:	f8a7 320c 	strh.w	r3, [r7, #524]	@ 0x20c
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8004588:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800458c:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	b21a      	sxth	r2, r3
 8004596:	f8b7 120c 	ldrh.w	r1, [r7, #524]	@ 0x20c
 800459a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800459e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80045a2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80045a6:	b21b      	sxth	r3, r3
 80045a8:	4053      	eors	r3, r2
 80045aa:	b21a      	sxth	r2, r3
 80045ac:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80045b0:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 80045b4:	801a      	strh	r2, [r3, #0]
	for(j = 0; j < data_blk_size; j++)
 80045b6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	@ 0x20e
 80045ba:	3301      	adds	r3, #1
 80045bc:	f8a7 320e 	strh.w	r3, [r7, #526]	@ 0x20e
 80045c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80045c4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80045c8:	f8b7 220e 	ldrh.w	r2, [r7, #526]	@ 0x20e
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d3c2      	bcc.n	8004558 <dxl_updateCRC+0x4c>
	}

	return crc_accum;
 80045d2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80045d6:	f2a3 230a 	subw	r3, r3, #522	@ 0x20a
 80045da:	881b      	ldrh	r3, [r3, #0]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	08005864 	.word	0x08005864

080045ec <dxl_rcv_cb>:
uint8_t 	size = 0;

uint8_t 	dxl_rcvBuf[BUF_SIZE];
//==================================================================
void dxl_rcv_cb(uint8_t car)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	4603      	mov	r3, r0
 80045f4:	71fb      	strb	r3, [r7, #7]
		dxl_rcvBuf[(p_wr++)%BUF_SIZE] = car;
 80045f6:	4b10      	ldr	r3, [pc, #64]	@ (8004638 <dxl_rcv_cb+0x4c>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	b2d1      	uxtb	r1, r2
 80045fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004638 <dxl_rcv_cb+0x4c>)
 8004600:	7011      	strb	r1, [r2, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	4b0d      	ldr	r3, [pc, #52]	@ (800463c <dxl_rcv_cb+0x50>)
 8004606:	fb83 1302 	smull	r1, r3, r3, r2
 800460a:	1159      	asrs	r1, r3, #5
 800460c:	17d3      	asrs	r3, r2, #31
 800460e:	1acb      	subs	r3, r1, r3
 8004610:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	4909      	ldr	r1, [pc, #36]	@ (8004640 <dxl_rcv_cb+0x54>)
 800461c:	79fa      	ldrb	r2, [r7, #7]
 800461e:	54ca      	strb	r2, [r1, r3]
		size++;
 8004620:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <dxl_rcv_cb+0x58>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	3301      	adds	r3, #1
 8004626:	b2da      	uxtb	r2, r3
 8004628:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <dxl_rcv_cb+0x58>)
 800462a:	701a      	strb	r2, [r3, #0]
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	20000050 	.word	0x20000050
 800463c:	10624dd3 	.word	0x10624dd3
 8004640:	20000130 	.word	0x20000130
 8004644:	20000052 	.word	0x20000052

08004648 <main>:
char snum[10];
char str[10];
//uint8_t signal_recieved;

int main(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
	HAL_Init();	// passage par stm32f4xx_hal_msp.c : configuration des broches
 800464c:	f7fc fb5a 	bl	8000d04 <HAL_Init>
	SystemClock_Config();
 8004650:	f7ff fe1e 	bl	8004290 <SystemClock_Config>

    uart1_Init();			// ZIGBEE
 8004654:	f000 fd9e 	bl	8005194 <uart1_Init>
    uart2_Init();           // CABLE
 8004658:	f000 fdc8 	bl	80051ec <uart2_Init>
    uart6_Init();           // DYNAMIXEL
 800465c:	f000 fdf2 	bl	8005244 <uart6_Init>
    HAL_Delay(500);
 8004660:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004664:	f7fc fbc0 	bl	8000de8 <HAL_Delay>
    HAL_MspInit();
 8004668:	f000 f962 	bl	8004930 <HAL_MspInit>
	  Uart6Handle.Init.OverSampling = UART_OVERSAMPLING_16;

	  HAL_UART_Init(&Uart6Handle);*/


	dxl_LED(2, LED_ON);
 800466c:	2101      	movs	r1, #1
 800466e:	2002      	movs	r0, #2
 8004670:	f7ff fe66 	bl	8004340 <dxl_LED>
	dxl_LED(1, LED_ON);
 8004674:	2101      	movs	r1, #1
 8004676:	2001      	movs	r0, #1
 8004678:	f7ff fe62 	bl	8004340 <dxl_LED>
	HAL_Delay(500);
 800467c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004680:	f7fc fbb2 	bl	8000de8 <HAL_Delay>
	dxl_LED(1, LED_OFF);
 8004684:	2100      	movs	r1, #0
 8004686:	2001      	movs	r0, #1
 8004688:	f7ff fe5a 	bl	8004340 <dxl_LED>
	dxl_LED(2, LED_OFF);
 800468c:	2100      	movs	r1, #0
 800468e:	2002      	movs	r0, #2
 8004690:	f7ff fe56 	bl	8004340 <dxl_LED>
	HAL_Delay(500);
 8004694:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004698:	f7fc fba6 	bl	8000de8 <HAL_Delay>
	dxl_LED(1, LED_ON );
 800469c:	2101      	movs	r1, #1
 800469e:	2001      	movs	r0, #1
 80046a0:	f7ff fe4e 	bl	8004340 <dxl_LED>
	dxl_LED(2, LED_ON );
 80046a4:	2101      	movs	r1, #1
 80046a6:	2002      	movs	r0, #2
 80046a8:	f7ff fe4a 	bl	8004340 <dxl_LED>
	HAL_Delay(500);
 80046ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80046b0:	f7fc fb9a 	bl	8000de8 <HAL_Delay>
	dxl_LED(1, LED_OFF);
 80046b4:	2100      	movs	r1, #0
 80046b6:	2001      	movs	r0, #1
 80046b8:	f7ff fe42 	bl	8004340 <dxl_LED>
	dxl_LED(2, LED_OFF);
 80046bc:	2100      	movs	r1, #0
 80046be:	2002      	movs	r0, #2
 80046c0:	f7ff fe3e 	bl	8004340 <dxl_LED>
	HAL_Delay(100);
 80046c4:	2064      	movs	r0, #100	@ 0x64
 80046c6:	f7fc fb8f 	bl	8000de8 <HAL_Delay>
	dxl_setGoalVelocity(1, 265);

	dxl_torque(2, TORQUE_OFF);
	dxl_torque(1, TORQUE_OFF);*/

	dxl_setOperatingMode(1, VELOCITY_MODE);
 80046ca:	2101      	movs	r1, #1
 80046cc:	2001      	movs	r0, #1
 80046ce:	f7ff fe65 	bl	800439c <dxl_setOperatingMode>
	dxl_torque(1,TORQUE_ON);
 80046d2:	2101      	movs	r1, #1
 80046d4:	2001      	movs	r0, #1
 80046d6:	f7ff fe4a 	bl	800436e <dxl_torque>

	dxl_setOperatingMode(2, VELOCITY_MODE);
 80046da:	2101      	movs	r1, #1
 80046dc:	2002      	movs	r0, #2
 80046de:	f7ff fe5d 	bl	800439c <dxl_setOperatingMode>
	dxl_torque(2,TORQUE_ON);
 80046e2:	2101      	movs	r1, #1
 80046e4:	2002      	movs	r0, #2
 80046e6:	f7ff fe42 	bl	800436e <dxl_torque>
	    {




	    	v=(uint8_t)rec_buf1[1];
 80046ea:	4b8a      	ldr	r3, [pc, #552]	@ (8004914 <main+0x2cc>)
 80046ec:	785a      	ldrb	r2, [r3, #1]
 80046ee:	4b8a      	ldr	r3, [pc, #552]	@ (8004918 <main+0x2d0>)
 80046f0:	701a      	strb	r2, [r3, #0]
	    	switch(rec_buf1[0])
 80046f2:	4b88      	ldr	r3, [pc, #544]	@ (8004914 <main+0x2cc>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	3b63      	subs	r3, #99	@ 0x63
 80046f8:	2b17      	cmp	r3, #23
 80046fa:	f200 8107 	bhi.w	800490c <main+0x2c4>
 80046fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004704 <main+0xbc>)
 8004700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004704:	08004845 	.word	0x08004845
 8004708:	080047b9 	.word	0x080047b9
 800470c:	0800490d 	.word	0x0800490d
 8004710:	0800490d 	.word	0x0800490d
 8004714:	0800490d 	.word	0x0800490d
 8004718:	0800481d 	.word	0x0800481d
 800471c:	0800490d 	.word	0x0800490d
 8004720:	0800490d 	.word	0x0800490d
 8004724:	0800490d 	.word	0x0800490d
 8004728:	0800490d 	.word	0x0800490d
 800472c:	0800490d 	.word	0x0800490d
 8004730:	0800490d 	.word	0x0800490d
 8004734:	0800490d 	.word	0x0800490d
 8004738:	0800490d 	.word	0x0800490d
 800473c:	080047e9 	.word	0x080047e9
 8004740:	0800490d 	.word	0x0800490d
 8004744:	08004787 	.word	0x08004787
 8004748:	0800490d 	.word	0x0800490d
 800474c:	0800490d 	.word	0x0800490d
 8004750:	0800490d 	.word	0x0800490d
 8004754:	0800490d 	.word	0x0800490d
 8004758:	0800490d 	.word	0x0800490d
 800475c:	0800490d 	.word	0x0800490d
 8004760:	08004765 	.word	0x08004765
	    	{
	    	//HAL_Delay(1000);
	    	case 'z':
	    		dxl_setGoalVelocity(1, v);
 8004764:	4b6c      	ldr	r3, [pc, #432]	@ (8004918 <main+0x2d0>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	4619      	mov	r1, r3
 800476a:	2001      	movs	r0, #1
 800476c:	f7ff fe2d 	bl	80043ca <dxl_setGoalVelocity>
	    		dxl_setGoalVelocity(2, -v);
 8004770:	4b69      	ldr	r3, [pc, #420]	@ (8004918 <main+0x2d0>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	425b      	negs	r3, r3
 8004776:	4619      	mov	r1, r3
 8004778:	2002      	movs	r0, #2
 800477a:	f7ff fe26 	bl	80043ca <dxl_setGoalVelocity>
	    		//r1="265";
	    		//r2="265;";
	    		//HAL_Delay(1000);
	    		term_printf_zigbee("265,265");
 800477e:	4867      	ldr	r0, [pc, #412]	@ (800491c <main+0x2d4>)
 8004780:	f000 fe26 	bl	80053d0 <term_printf_zigbee>
	    		//HAL_Delay(500);
	    		break;
 8004784:	e0c2      	b.n	800490c <main+0x2c4>
	    	case 's':
	    		dxl_setGoalVelocity(1, -v);
 8004786:	4b64      	ldr	r3, [pc, #400]	@ (8004918 <main+0x2d0>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	425b      	negs	r3, r3
 800478c:	4619      	mov	r1, r3
 800478e:	2001      	movs	r0, #1
 8004790:	f7ff fe1b 	bl	80043ca <dxl_setGoalVelocity>
	    		dxl_setGoalVelocity(2, v);
 8004794:	4b60      	ldr	r3, [pc, #384]	@ (8004918 <main+0x2d0>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	4619      	mov	r1, r3
 800479a:	2002      	movs	r0, #2
 800479c:	f7ff fe15 	bl	80043ca <dxl_setGoalVelocity>
	    		HAL_Delay(500);
 80047a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80047a4:	f7fc fb20 	bl	8000de8 <HAL_Delay>
	    		term_printf_zigbee("265,265");
 80047a8:	485c      	ldr	r0, [pc, #368]	@ (800491c <main+0x2d4>)
 80047aa:	f000 fe11 	bl	80053d0 <term_printf_zigbee>
	    		HAL_Delay(500);
 80047ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80047b2:	f7fc fb19 	bl	8000de8 <HAL_Delay>
	    		break;
 80047b6:	e0a9      	b.n	800490c <main+0x2c4>

	    	case 'd':
	    		dxl_setGoalVelocity(1, v);
 80047b8:	4b57      	ldr	r3, [pc, #348]	@ (8004918 <main+0x2d0>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	4619      	mov	r1, r3
 80047be:	2001      	movs	r0, #1
 80047c0:	f7ff fe03 	bl	80043ca <dxl_setGoalVelocity>
	    		dxl_setGoalVelocity(2, v);
 80047c4:	4b54      	ldr	r3, [pc, #336]	@ (8004918 <main+0x2d0>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	4619      	mov	r1, r3
 80047ca:	2002      	movs	r0, #2
 80047cc:	f7ff fdfd 	bl	80043ca <dxl_setGoalVelocity>
	    		HAL_Delay(500);
 80047d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80047d4:	f7fc fb08 	bl	8000de8 <HAL_Delay>
	    		term_printf_zigbee("265,135");
 80047d8:	4851      	ldr	r0, [pc, #324]	@ (8004920 <main+0x2d8>)
 80047da:	f000 fdf9 	bl	80053d0 <term_printf_zigbee>
	    		HAL_Delay(500);
 80047de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80047e2:	f7fc fb01 	bl	8000de8 <HAL_Delay>
	    		break;
 80047e6:	e091      	b.n	800490c <main+0x2c4>

	    	case 'q':
	    		dxl_setGoalVelocity(1, -v);
 80047e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004918 <main+0x2d0>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	425b      	negs	r3, r3
 80047ee:	4619      	mov	r1, r3
 80047f0:	2001      	movs	r0, #1
 80047f2:	f7ff fdea 	bl	80043ca <dxl_setGoalVelocity>
	    		dxl_setGoalVelocity(2, -v);
 80047f6:	4b48      	ldr	r3, [pc, #288]	@ (8004918 <main+0x2d0>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	425b      	negs	r3, r3
 80047fc:	4619      	mov	r1, r3
 80047fe:	2002      	movs	r0, #2
 8004800:	f7ff fde3 	bl	80043ca <dxl_setGoalVelocity>
	    		HAL_Delay(500);
 8004804:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004808:	f7fc faee 	bl	8000de8 <HAL_Delay>
	    		term_printf_zigbee("135,265");
 800480c:	4845      	ldr	r0, [pc, #276]	@ (8004924 <main+0x2dc>)
 800480e:	f000 fddf 	bl	80053d0 <term_printf_zigbee>
	    		HAL_Delay(500);
 8004812:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004816:	f7fc fae7 	bl	8000de8 <HAL_Delay>
	    		break;
 800481a:	e077      	b.n	800490c <main+0x2c4>

	    	case 'h':
	    		dxl_setGoalVelocity(1, 0);
 800481c:	2100      	movs	r1, #0
 800481e:	2001      	movs	r0, #1
 8004820:	f7ff fdd3 	bl	80043ca <dxl_setGoalVelocity>
	    		dxl_setGoalVelocity(2, 0);
 8004824:	2100      	movs	r1, #0
 8004826:	2002      	movs	r0, #2
 8004828:	f7ff fdcf 	bl	80043ca <dxl_setGoalVelocity>
	    		HAL_Delay(500);
 800482c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004830:	f7fc fada 	bl	8000de8 <HAL_Delay>
	    		term_printf_zigbee("0,0");
 8004834:	483c      	ldr	r0, [pc, #240]	@ (8004928 <main+0x2e0>)
 8004836:	f000 fdcb 	bl	80053d0 <term_printf_zigbee>
	    		HAL_Delay(500);
 800483a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800483e:	f7fc fad3 	bl	8000de8 <HAL_Delay>
	    		break;
 8004842:	e063      	b.n	800490c <main+0x2c4>

	    	case 'c':
	    		if((HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8)) && (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)))
 8004844:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004848:	4838      	ldr	r0, [pc, #224]	@ (800492c <main+0x2e4>)
 800484a:	f7fc fdb7 	bl	80013bc <HAL_GPIO_ReadPin>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d010      	beq.n	8004876 <main+0x22e>
 8004854:	2101      	movs	r1, #1
 8004856:	4835      	ldr	r0, [pc, #212]	@ (800492c <main+0x2e4>)
 8004858:	f7fc fdb0 	bl	80013bc <HAL_GPIO_ReadPin>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <main+0x22e>
	    			{
	    		    		dxl_setGoalVelocity(1, 50);
 8004862:	2132      	movs	r1, #50	@ 0x32
 8004864:	2001      	movs	r0, #1
 8004866:	f7ff fdb0 	bl	80043ca <dxl_setGoalVelocity>
	    		    		dxl_setGoalVelocity(2, -50);
 800486a:	f06f 0131 	mvn.w	r1, #49	@ 0x31
 800486e:	2002      	movs	r0, #2
 8004870:	f7ff fdab 	bl	80043ca <dxl_setGoalVelocity>
 8004874:	e049      	b.n	800490a <main+0x2c2>
	    		    		    		/*HAL_Delay(500);
	    		    		    		term_printf_zigbee("60,60");

	    		    		    		HAL_Delay(500);*/
	    		   }
	    		  else if((!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8)) && (!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)))
 8004876:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800487a:	482c      	ldr	r0, [pc, #176]	@ (800492c <main+0x2e4>)
 800487c:	f7fc fd9e 	bl	80013bc <HAL_GPIO_ReadPin>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10f      	bne.n	80048a6 <main+0x25e>
 8004886:	2101      	movs	r1, #1
 8004888:	4828      	ldr	r0, [pc, #160]	@ (800492c <main+0x2e4>)
 800488a:	f7fc fd97 	bl	80013bc <HAL_GPIO_ReadPin>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d108      	bne.n	80048a6 <main+0x25e>
	    		   {
	    		    dxl_setGoalVelocity(1, 0);
 8004894:	2100      	movs	r1, #0
 8004896:	2001      	movs	r0, #1
 8004898:	f7ff fd97 	bl	80043ca <dxl_setGoalVelocity>
	    		    dxl_setGoalVelocity(2, 0);
 800489c:	2100      	movs	r1, #0
 800489e:	2002      	movs	r0, #2
 80048a0:	f7ff fd93 	bl	80043ca <dxl_setGoalVelocity>
 80048a4:	e031      	b.n	800490a <main+0x2c2>

	    		    			    		/*HAL_Delay(500);
	    		    			    		term_printf_zigbee("0,0");
	    		    			    		HAL_Delay(500);*/
	    		}
	    		  else if((!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8)) && (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)))
 80048a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048aa:	4820      	ldr	r0, [pc, #128]	@ (800492c <main+0x2e4>)
 80048ac:	f7fc fd86 	bl	80013bc <HAL_GPIO_ReadPin>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d111      	bne.n	80048da <main+0x292>
 80048b6:	2101      	movs	r1, #1
 80048b8:	481c      	ldr	r0, [pc, #112]	@ (800492c <main+0x2e4>)
 80048ba:	f7fc fd7f 	bl	80013bc <HAL_GPIO_ReadPin>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00a      	beq.n	80048da <main+0x292>
	    		    	   {
	    		    		dxl_setGoalVelocity(1, -50);
 80048c4:	f06f 0131 	mvn.w	r1, #49	@ 0x31
 80048c8:	2001      	movs	r0, #1
 80048ca:	f7ff fd7e 	bl	80043ca <dxl_setGoalVelocity>
	    		    		dxl_setGoalVelocity(2, -50);
 80048ce:	f06f 0131 	mvn.w	r1, #49	@ 0x31
 80048d2:	2002      	movs	r0, #2
 80048d4:	f7ff fd79 	bl	80043ca <dxl_setGoalVelocity>
 80048d8:	e017      	b.n	800490a <main+0x2c2>

	    		    			    		/*HAL_Delay(500);
	    		    			    		term_printf_zigbee("60,60");
	    		    			    		HAL_Delay(500);*/
	    		    	    }
	    		   else if((!HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)) && (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8)))
 80048da:	2101      	movs	r1, #1
 80048dc:	4813      	ldr	r0, [pc, #76]	@ (800492c <main+0x2e4>)
 80048de:	f7fc fd6d 	bl	80013bc <HAL_GPIO_ReadPin>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d110      	bne.n	800490a <main+0x2c2>
 80048e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80048ec:	480f      	ldr	r0, [pc, #60]	@ (800492c <main+0x2e4>)
 80048ee:	f7fc fd65 	bl	80013bc <HAL_GPIO_ReadPin>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <main+0x2c2>
	    		    	    {
	    		    			dxl_setGoalVelocity(1, 50);
 80048f8:	2132      	movs	r1, #50	@ 0x32
 80048fa:	2001      	movs	r0, #1
 80048fc:	f7ff fd65 	bl	80043ca <dxl_setGoalVelocity>
	    		    			dxl_setGoalVelocity(2, 50);
 8004900:	2132      	movs	r1, #50	@ 0x32
 8004902:	2002      	movs	r0, #2
 8004904:	f7ff fd61 	bl	80043ca <dxl_setGoalVelocity>

	    		    			    		/*HAL_Delay(500);
	    		    			    		term_printf_zigbee("60,60");
	    		    			    		HAL_Delay(500);*/
	    		    	    }
	    						break;
 8004908:	e7ff      	b.n	800490a <main+0x2c2>
 800490a:	bf00      	nop


	    }
	    HAL_Delay(10); // 100 ms
 800490c:	200a      	movs	r0, #10
 800490e:	f7fc fa6b 	bl	8000de8 <HAL_Delay>
	    	v=(uint8_t)rec_buf1[1];
 8004912:	e6ea      	b.n	80046ea <main+0xa2>
 8004914:	20000060 	.word	0x20000060
 8004918:	20000328 	.word	0x20000328
 800491c:	08005ad0 	.word	0x08005ad0
 8004920:	08005ad8 	.word	0x08005ad8
 8004924:	08005ae0 	.word	0x08005ae0
 8004928:	08005ae8 	.word	0x08005ae8
 800492c:	40020000 	.word	0x40020000

08004930 <HAL_MspInit>:
void HAL_UARTDYN_MspInit(void);
void HAL_GPIO_LINE_MspInit(void);
void HAL_GPIO_LED_MspInit(void);

void HAL_MspInit(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0

	  __GPIOA_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60fb      	str	r3, [r7, #12]
 800493a:	4b1d      	ldr	r3, [pc, #116]	@ (80049b0 <HAL_MspInit+0x80>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493e:	4a1c      	ldr	r2, [pc, #112]	@ (80049b0 <HAL_MspInit+0x80>)
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	6313      	str	r3, [r2, #48]	@ 0x30
 8004946:	4b1a      	ldr	r3, [pc, #104]	@ (80049b0 <HAL_MspInit+0x80>)
 8004948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
	  __GPIOB_CLK_ENABLE();
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]
 8004956:	4b16      	ldr	r3, [pc, #88]	@ (80049b0 <HAL_MspInit+0x80>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495a:	4a15      	ldr	r2, [pc, #84]	@ (80049b0 <HAL_MspInit+0x80>)
 800495c:	f043 0302 	orr.w	r3, r3, #2
 8004960:	6313      	str	r3, [r2, #48]	@ 0x30
 8004962:	4b13      	ldr	r3, [pc, #76]	@ (80049b0 <HAL_MspInit+0x80>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	60bb      	str	r3, [r7, #8]
 800496c:	68bb      	ldr	r3, [r7, #8]
	  __GPIOC_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	4b0f      	ldr	r3, [pc, #60]	@ (80049b0 <HAL_MspInit+0x80>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	4a0e      	ldr	r2, [pc, #56]	@ (80049b0 <HAL_MspInit+0x80>)
 8004978:	f043 0304 	orr.w	r3, r3, #4
 800497c:	6313      	str	r3, [r2, #48]	@ 0x30
 800497e:	4b0c      	ldr	r3, [pc, #48]	@ (80049b0 <HAL_MspInit+0x80>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	607b      	str	r3, [r7, #4]
 8004988:	687b      	ldr	r3, [r7, #4]

	  HAL_UARTCOM_MspInit();   // UART2
 800498a:	f000 f82b 	bl	80049e4 <HAL_UARTCOM_MspInit>
	  HAL_UARTDYN_MspInit();   // UART6
 800498e:	f000 f8bb 	bl	8004b08 <HAL_UARTDYN_MspInit>
	  HAL_UART1_MspInit();     // UART1
 8004992:	f000 f867 	bl	8004a64 <HAL_UART1_MspInit>

	  HAL_tickTimer_MspInit();
 8004996:	f000 f94b 	bl	8004c30 <HAL_tickTimer_MspInit>

	  HAL_GPIO_LINE_MspInit();
 800499a:	f000 f903 	bl	8004ba4 <HAL_GPIO_LINE_MspInit>
	//  HAL_GPIO_LED_MspInit();
	//  HAL_GPIO_BUTTON_MspInit();
	//  HAL_i2c_MspInit();
	//  HAL_spi_MspInit();
	//  HAL_adcir_MspInit();
	  HAL_GPIO_DYN_wrEn_MspInit();
 800499e:	f000 f809 	bl	80049b4 <HAL_GPIO_DYN_wrEn_MspInit>
	  HAL_GPIO_LED_MspInit();
 80049a2:	f000 f913 	bl	8004bcc <HAL_GPIO_LED_MspInit>
}
 80049a6:	bf00      	nop
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40023800 	.word	0x40023800

080049b4 <HAL_GPIO_DYN_wrEn_MspInit>:

/*****************************************************************/

void HAL_GPIO_DYN_wrEn_MspInit(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b086      	sub	sp, #24
 80049b8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;


	  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80049ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049be:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049c0:	2301      	movs	r3, #1
 80049c2:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049c4:	2301      	movs	r3, #1
 80049c6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80049c8:	2302      	movs	r3, #2
 80049ca:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049cc:	1d3b      	adds	r3, r7, #4
 80049ce:	4619      	mov	r1, r3
 80049d0:	4803      	ldr	r0, [pc, #12]	@ (80049e0 <HAL_GPIO_DYN_wrEn_MspInit+0x2c>)
 80049d2:	f7fc fb6f 	bl	80010b4 <HAL_GPIO_Init>
}
 80049d6:	bf00      	nop
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	40020000 	.word	0x40020000

080049e4 <HAL_UARTCOM_MspInit>:
			USART2 : ST-LINK virtual Port
 TX --> PA2
 RX --> PA3
*******************************************************************/
void HAL_UARTCOM_MspInit(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]
 80049ee:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <HAL_UARTCOM_MspInit+0x78>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f2:	4a1a      	ldr	r2, [pc, #104]	@ (8004a5c <HAL_UARTCOM_MspInit+0x78>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80049fa:	4b18      	ldr	r3, [pc, #96]	@ (8004a5c <HAL_UARTCOM_MspInit+0x78>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	60bb      	str	r3, [r7, #8]
 8004a04:	68bb      	ldr	r3, [r7, #8]

  __USART2_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	4b14      	ldr	r3, [pc, #80]	@ (8004a5c <HAL_UARTCOM_MspInit+0x78>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	4a13      	ldr	r2, [pc, #76]	@ (8004a5c <HAL_UARTCOM_MspInit+0x78>)
 8004a10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a16:	4b11      	ldr	r3, [pc, #68]	@ (8004a5c <HAL_UARTCOM_MspInit+0x78>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1e:	607b      	str	r3, [r7, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin       = GPIO_PIN_2 | GPIO_PIN_3;
 8004a22:	230c      	movs	r3, #12
 8004a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004a26:	2302      	movs	r3, #2
 8004a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_LOW;	//GPIO_SPEED_FAST;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate =  GPIO_AF7_USART2;
 8004a32:	2307      	movs	r3, #7
 8004a34:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a36:	f107 030c 	add.w	r3, r7, #12
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4808      	ldr	r0, [pc, #32]	@ (8004a60 <HAL_UARTCOM_MspInit+0x7c>)
 8004a3e:	f7fc fb39 	bl	80010b4 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(USART2_IRQn, USART2_IRQ_PRIO, 0);
 8004a42:	2200      	movs	r2, #0
 8004a44:	2109      	movs	r1, #9
 8004a46:	2026      	movs	r0, #38	@ 0x26
 8004a48:	f7fc facd 	bl	8000fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004a4c:	2026      	movs	r0, #38	@ 0x26
 8004a4e:	f7fc fae6 	bl	800101e <HAL_NVIC_EnableIRQ>
}
 8004a52:	bf00      	nop
 8004a54:	3720      	adds	r7, #32
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	40020000 	.word	0x40020000

08004a64 <HAL_UART1_MspInit>:

  PA9     ------> USART1_TX
  PB3     ------> USART1_RX
******************************************************************/
void HAL_UART1_MspInit(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  __GPIOA_CLK_ENABLE();
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	4b23      	ldr	r3, [pc, #140]	@ (8004afc <HAL_UART1_MspInit+0x98>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	4a22      	ldr	r2, [pc, #136]	@ (8004afc <HAL_UART1_MspInit+0x98>)
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a7a:	4b20      	ldr	r3, [pc, #128]	@ (8004afc <HAL_UART1_MspInit+0x98>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	60bb      	str	r3, [r7, #8]
 8004a84:	68bb      	ldr	r3, [r7, #8]

  __USART1_CLK_ENABLE();
 8004a86:	2300      	movs	r3, #0
 8004a88:	607b      	str	r3, [r7, #4]
 8004a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8004afc <HAL_UART1_MspInit+0x98>)
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004afc <HAL_UART1_MspInit+0x98>)
 8004a90:	f043 0310 	orr.w	r3, r3, #16
 8004a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a96:	4b19      	ldr	r3, [pc, #100]	@ (8004afc <HAL_UART1_MspInit+0x98>)
 8004a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	607b      	str	r3, [r7, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin       = GPIO_PIN_9;
 8004aa2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004aac:	2301      	movs	r3, #1
 8004aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_LOW;	//GPIO_SPEED_FAST;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate =  GPIO_AF7_USART1;
 8004ab4:	2307      	movs	r3, #7
 8004ab6:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab8:	f107 030c 	add.w	r3, r7, #12
 8004abc:	4619      	mov	r1, r3
 8004abe:	4810      	ldr	r0, [pc, #64]	@ (8004b00 <HAL_UART1_MspInit+0x9c>)
 8004ac0:	f7fc faf8 	bl	80010b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin       = GPIO_PIN_3;
 8004ac4:	2308      	movs	r3, #8
 8004ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004ac8:	2302      	movs	r3, #2
 8004aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004acc:	2301      	movs	r3, #1
 8004ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_LOW;	//GPIO_SPEED_FAST;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate =  GPIO_AF7_USART1;
 8004ad4:	2307      	movs	r3, #7
 8004ad6:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ad8:	f107 030c 	add.w	r3, r7, #12
 8004adc:	4619      	mov	r1, r3
 8004ade:	4809      	ldr	r0, [pc, #36]	@ (8004b04 <HAL_UART1_MspInit+0xa0>)
 8004ae0:	f7fc fae8 	bl	80010b4 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority(USART1_IRQn, USART1_IRQ_PRIO, 0);
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2108      	movs	r1, #8
 8004ae8:	2025      	movs	r0, #37	@ 0x25
 8004aea:	f7fc fa7c 	bl	8000fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004aee:	2025      	movs	r0, #37	@ 0x25
 8004af0:	f7fc fa95 	bl	800101e <HAL_NVIC_EnableIRQ>
}
 8004af4:	bf00      	nop
 8004af6:	3720      	adds	r7, #32
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40020000 	.word	0x40020000
 8004b04:	40020400 	.word	0x40020400

08004b08 <HAL_UARTDYN_MspInit>:

  PC6     ------> USART6_TX
  PC7     ------> USART6_RX
******************************************************************/
void HAL_UARTDYN_MspInit(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

    __USART6_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	603b      	str	r3, [r7, #0]
 8004b12:	4b21      	ldr	r3, [pc, #132]	@ (8004b98 <HAL_UARTDYN_MspInit+0x90>)
 8004b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b16:	4a20      	ldr	r2, [pc, #128]	@ (8004b98 <HAL_UARTDYN_MspInit+0x90>)
 8004b18:	f043 0320 	orr.w	r3, r3, #32
 8004b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004b98 <HAL_UARTDYN_MspInit+0x90>)
 8004b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	603b      	str	r3, [r7, #0]
 8004b28:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004b2a:	2380      	movs	r3, #128	@ 0x80
 8004b2c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b32:	2301      	movs	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004b36:	2301      	movs	r3, #1
 8004b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004b3a:	2308      	movs	r3, #8
 8004b3c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b3e:	1d3b      	adds	r3, r7, #4
 8004b40:	4619      	mov	r1, r3
 8004b42:	4816      	ldr	r0, [pc, #88]	@ (8004b9c <HAL_UARTDYN_MspInit+0x94>)
 8004b44:	f7fc fab6 	bl	80010b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004b48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b4c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b52:	2301      	movs	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004b56:	2301      	movs	r3, #1
 8004b58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	4619      	mov	r1, r3
 8004b62:	480f      	ldr	r0, [pc, #60]	@ (8004ba0 <HAL_UARTDYN_MspInit+0x98>)
 8004b64:	f7fc faa6 	bl	80010b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;		// CAVALIER SUR PA_11 et PA_6
 8004b68:	2340      	movs	r3, #64	@ 0x40
 8004b6a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b74:	1d3b      	adds	r3, r7, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4809      	ldr	r0, [pc, #36]	@ (8004ba0 <HAL_UARTDYN_MspInit+0x98>)
 8004b7a:	f7fc fa9b 	bl	80010b4 <HAL_GPIO_Init>



    HAL_NVIC_SetPriority(USART6_IRQn, USART6_IRQ_PRIO, 0);
 8004b7e:	2200      	movs	r2, #0
 8004b80:	210a      	movs	r1, #10
 8004b82:	2047      	movs	r0, #71	@ 0x47
 8004b84:	f7fc fa2f 	bl	8000fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004b88:	2047      	movs	r0, #71	@ 0x47
 8004b8a:	f7fc fa48 	bl	800101e <HAL_NVIC_EnableIRQ>
}
 8004b8e:	bf00      	nop
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	40020800 	.word	0x40020800
 8004ba0:	40020000 	.word	0x40020000

08004ba4 <HAL_GPIO_LINE_MspInit>:


}

void HAL_GPIO_LINE_MspInit(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004baa:	2301      	movs	r3, #1
 8004bac:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bb6:	1d3b      	adds	r3, r7, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4803      	ldr	r0, [pc, #12]	@ (8004bc8 <HAL_GPIO_LINE_MspInit+0x24>)
 8004bbc:	f7fc fa7a 	bl	80010b4 <HAL_GPIO_Init>



}
 8004bc0:	bf00      	nop
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40020000 	.word	0x40020000

08004bcc <HAL_GPIO_LED_MspInit>:

//******************************************************************
//			GPIO LED PA5
//******************************************************************
void HAL_GPIO_LED_MspInit(void)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  GPIO_InitStruct;

/* Configure PA05 IO in output push-pull mode to drive external LED */
	  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004bd2:	2320      	movs	r3, #32
 8004bd4:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004bde:	2302      	movs	r3, #2
 8004be0:	613b      	str	r3, [r7, #16]

	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be2:	1d3b      	adds	r3, r7, #4
 8004be4:	4619      	mov	r1, r3
 8004be6:	4811      	ldr	r0, [pc, #68]	@ (8004c2c <HAL_GPIO_LED_MspInit+0x60>)
 8004be8:	f7fc fa64 	bl	80010b4 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004bec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bf0:	607b      	str	r3, [r7, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	60bb      	str	r3, [r7, #8]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	613b      	str	r3, [r7, #16]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bfe:	1d3b      	adds	r3, r7, #4
 8004c00:	4619      	mov	r1, r3
 8004c02:	480a      	ldr	r0, [pc, #40]	@ (8004c2c <HAL_GPIO_LED_MspInit+0x60>)
 8004c04:	f7fc fa56 	bl	80010b4 <HAL_GPIO_Init>

      GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	607b      	str	r3, [r7, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	60bb      	str	r3, [r7, #8]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c10:	2301      	movs	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004c14:	2302      	movs	r3, #2
 8004c16:	613b      	str	r3, [r7, #16]
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c18:	1d3b      	adds	r3, r7, #4
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4803      	ldr	r0, [pc, #12]	@ (8004c2c <HAL_GPIO_LED_MspInit+0x60>)
 8004c1e:	f7fc fa49 	bl	80010b4 <HAL_GPIO_Init>
}
 8004c22:	bf00      	nop
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40020000 	.word	0x40020000

08004c30 <HAL_tickTimer_MspInit>:

/******************************************************************
			TIMER 5 TickTimer
******************************************************************/
void HAL_tickTimer_MspInit(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0

	__TIM5_CLK_ENABLE();
 8004c36:	2300      	movs	r3, #0
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c6c <HAL_tickTimer_MspInit+0x3c>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	4a0b      	ldr	r2, [pc, #44]	@ (8004c6c <HAL_tickTimer_MspInit+0x3c>)
 8004c40:	f043 0308 	orr.w	r3, r3, #8
 8004c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c46:	4b09      	ldr	r3, [pc, #36]	@ (8004c6c <HAL_tickTimer_MspInit+0x3c>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	607b      	str	r3, [r7, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]

 	 HAL_NVIC_SetPriority(TIM5_IRQn, TIM5_IRQ_PRIO, 0);
 8004c52:	2200      	movs	r2, #0
 8004c54:	210c      	movs	r1, #12
 8004c56:	2032      	movs	r0, #50	@ 0x32
 8004c58:	f7fc f9c5 	bl	8000fe6 <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004c5c:	2032      	movs	r0, #50	@ 0x32
 8004c5e:	f7fc f9de 	bl	800101e <HAL_NVIC_EnableIRQ>
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800

08004c70 <NMI_Handler>:
/******************************************************************************/
/*            Cortex-M4 Processor Exceptions Handlers                         */
/******************************************************************************/

void NMI_Handler(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
}
 8004c74:	bf00      	nop
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HardFault_Handler>:

void HardFault_Handler(void)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004c82:	bf00      	nop
 8004c84:	e7fd      	b.n	8004c82 <HardFault_Handler+0x4>

08004c86 <MemManage_Handler>:
  }
}


void MemManage_Handler(void)
{
 8004c86:	b480      	push	{r7}
 8004c88:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004c8a:	bf00      	nop
 8004c8c:	e7fd      	b.n	8004c8a <MemManage_Handler+0x4>

08004c8e <BusFault_Handler>:
  {
  }
}

void BusFault_Handler(void)
{
 8004c8e:	b480      	push	{r7}
 8004c90:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004c92:	bf00      	nop
 8004c94:	e7fd      	b.n	8004c92 <BusFault_Handler+0x4>

08004c96 <UsageFault_Handler>:
  {
  }
}

void UsageFault_Handler(void)
{
 8004c96:	b480      	push	{r7}
 8004c98:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004c9a:	bf00      	nop
 8004c9c:	e7fd      	b.n	8004c9a <UsageFault_Handler+0x4>

08004c9e <DebugMon_Handler>:
void SVC_Handler(void)
{}
*/

void DebugMon_Handler(void)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	af00      	add	r7, sp, #0
}
 8004ca2:	bf00      	nop
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <SysTick_Handler>:
void PendSV_Handler(void)
{}
*/

void SysTick_Handler(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
	/*if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
	    {
	      xPortSysTickHandler();
	    }*/
  HAL_IncTick();
 8004cb0:	f7fc f87a 	bl	8000da8 <HAL_IncTick>
}
 8004cb4:	bf00      	nop
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <OTG_FS_IRQHandler>:


void OTG_FS_IRQHandler(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
   //HAL_PCD_IRQHandler(&hpcd); // USB
}
 8004cbc:	bf00      	nop
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <TIM5_IRQHandler>:
/*  available peripheral interrupt handler's name please refer to the startup */
/*  file (startup_stm32f4xx.s).                                               */
/******************************************************************************/

void TIM5_IRQHandler(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle_period);
 8004ccc:	4802      	ldr	r0, [pc, #8]	@ (8004cd8 <TIM5_IRQHandler+0x10>)
 8004cce:	f7fe fbc7 	bl	8003460 <HAL_TIM_IRQHandler>
}
 8004cd2:	bf00      	nop
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000344 	.word	0x20000344

08004cdc <EXTI0_IRQHandler>:

//=======================================================
//		ENCODER INDEX LEFT
//=======================================================
void EXTI0_IRQHandler(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004ce0:	2001      	movs	r0, #1
 8004ce2:	f7fc fb9d 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
}
 8004ce6:	bf00      	nop
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <EXTI1_IRQHandler>:
//=======================================================
//		ENCODER INDEX RIGHT
//=======================================================

void EXTI1_IRQHandler(void)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004cee:	2002      	movs	r0, #2
 8004cf0:	f7fc fb96 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
}
 8004cf4:	bf00      	nop
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
	  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004cfc:	4802      	ldr	r0, [pc, #8]	@ (8004d08 <I2C1_EV_IRQHandler+0x10>)
 8004cfe:	f7fc fbb2 	bl	8001466 <HAL_I2C_EV_IRQHandler>
}
 8004d02:	bf00      	nop
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000384 	.word	0x20000384

08004d0c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
	  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004d10:	4802      	ldr	r0, [pc, #8]	@ (8004d1c <I2C1_ER_IRQHandler+0x10>)
 8004d12:	f7fc fcf0 	bl	80016f6 <HAL_I2C_ER_IRQHandler>
}
 8004d16:	bf00      	nop
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000384 	.word	0x20000384

08004d20 <EXTI15_10_IRQHandler>:

//=======================================================
// USER BUTTON INTERRUPT (PC13)
//=======================================================
void EXTI15_10_IRQHandler(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004d24:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004d28:	f7fc fb7a 	bl	8001420 <HAL_GPIO_EXTI_IRQHandler>
}
 8004d2c:	bf00      	nop
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <USART2_IRQHandler>:
//=======================================================
// STLINK USART RECEIVE HANDLER
//=======================================================
void USART2_IRQHandler(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart2Handle);
 8004d34:	4802      	ldr	r0, [pc, #8]	@ (8004d40 <USART2_IRQHandler+0x10>)
 8004d36:	f7fe fe27 	bl	8003988 <HAL_UART_IRQHandler>
}
 8004d3a:	bf00      	nop
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	200000b0 	.word	0x200000b0

08004d44 <USART6_IRQHandler>:
//=======================================================
// ZIGBEE USART RECEIVE HANDLER
//=======================================================
void USART6_IRQHandler(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart6Handle);
 8004d48:	4802      	ldr	r0, [pc, #8]	@ (8004d54 <USART6_IRQHandler+0x10>)
 8004d4a:	f7fe fe1d 	bl	8003988 <HAL_UART_IRQHandler>
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	20000070 	.word	0x20000070

08004d58 <USART1_IRQHandler>:


void USART1_IRQHandler(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&Uart1Handle);
 8004d5c:	4802      	ldr	r0, [pc, #8]	@ (8004d68 <USART1_IRQHandler+0x10>)
 8004d5e:	f7fe fe13 	bl	8003988 <HAL_UART_IRQHandler>
}
 8004d62:	bf00      	nop
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200000f0 	.word	0x200000f0

08004d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d70:	4b16      	ldr	r3, [pc, #88]	@ (8004dcc <SystemInit+0x60>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d76:	4a15      	ldr	r2, [pc, #84]	@ (8004dcc <SystemInit+0x60>)
 8004d78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004d80:	4b13      	ldr	r3, [pc, #76]	@ (8004dd0 <SystemInit+0x64>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a12      	ldr	r2, [pc, #72]	@ (8004dd0 <SystemInit+0x64>)
 8004d86:	f043 0301 	orr.w	r3, r3, #1
 8004d8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d8c:	4b10      	ldr	r3, [pc, #64]	@ (8004dd0 <SystemInit+0x64>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004d92:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd0 <SystemInit+0x64>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a0e      	ldr	r2, [pc, #56]	@ (8004dd0 <SystemInit+0x64>)
 8004d98:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8004d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004da2:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd0 <SystemInit+0x64>)
 8004da4:	4a0b      	ldr	r2, [pc, #44]	@ (8004dd4 <SystemInit+0x68>)
 8004da6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004da8:	4b09      	ldr	r3, [pc, #36]	@ (8004dd0 <SystemInit+0x64>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a08      	ldr	r2, [pc, #32]	@ (8004dd0 <SystemInit+0x64>)
 8004dae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004db2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004db4:	4b06      	ldr	r3, [pc, #24]	@ (8004dd0 <SystemInit+0x64>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004dba:	4b04      	ldr	r3, [pc, #16]	@ (8004dcc <SystemInit+0x60>)
 8004dbc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004dc0:	609a      	str	r2, [r3, #8]
#endif
}
 8004dc2:	bf00      	nop
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	e000ed00 	.word	0xe000ed00
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	24003010 	.word	0x24003010

08004dd8 <num2str>:
 */
#include "util.h"

//=================================================================
void num2str(char *s, unsigned int number, unsigned int base, unsigned int size, int sp)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b089      	sub	sp, #36	@ 0x24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
        static char  hexChars[] = "0123456789ABCDEF";

        char *p=s;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	617b      	str	r3, [r7, #20]
        unsigned int i;
        char tmp;

        // get digits
        do {
                *s++=hexChars[number % base];
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	fbb3 f2f2 	udiv	r2, r3, r2
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	fb01 f202 	mul.w	r2, r1, r2
 8004df8:	1a9a      	subs	r2, r3, r2
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1c59      	adds	r1, r3, #1
 8004dfe:	60f9      	str	r1, [r7, #12]
 8004e00:	4936      	ldr	r1, [pc, #216]	@ (8004edc <num2str+0x104>)
 8004e02:	5c8a      	ldrb	r2, [r1, r2]
 8004e04:	701a      	strb	r2, [r3, #0]
        } while (number /= base);
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	60bb      	str	r3, [r7, #8]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e9      	bne.n	8004dea <num2str+0x12>
        *s='\0';
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	701a      	strb	r2, [r3, #0]

        // reverse string
        cnt=s-p;
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	613b      	str	r3, [r7, #16]
        for (i=0;i<cnt/2;i++) {
 8004e24:	2300      	movs	r3, #0
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	e01a      	b.n	8004e60 <num2str+0x88>
                tmp=p[i]; p[i] = p[cnt-i-1]; p[cnt-i-1]=tmp;
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	4413      	add	r3, r2
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	76fb      	strb	r3, [r7, #27]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	441a      	add	r2, r3
 8004e40:	6979      	ldr	r1, [r7, #20]
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	440b      	add	r3, r1
 8004e46:	7812      	ldrb	r2, [r2, #0]
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4413      	add	r3, r2
 8004e56:	7efa      	ldrb	r2, [r7, #27]
 8004e58:	701a      	strb	r2, [r3, #0]
        for (i=0;i<cnt/2;i++) {
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	085b      	lsrs	r3, r3, #1
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d3df      	bcc.n	8004e2a <num2str+0x52>
        }

        // add extra space
        if (cnt<size) {
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d22d      	bcs.n	8004ece <num2str+0xf6>
                for (i=cnt;i==0;i--)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	e00e      	b.n	8004e96 <num2str+0xbe>
                		{p[i+size-cnt]=p[i];}
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	441a      	add	r2, r3
 8004e7e:	69f9      	ldr	r1, [r7, #28]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	4419      	add	r1, r3
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1acb      	subs	r3, r1, r3
 8004e88:	6979      	ldr	r1, [r7, #20]
 8004e8a:	440b      	add	r3, r1
 8004e8c:	7812      	ldrb	r2, [r2, #0]
 8004e8e:	701a      	strb	r2, [r3, #0]
                for (i=cnt;i==0;i--)
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0ed      	beq.n	8004e78 <num2str+0xa0>
                if (sp) tmp=' '; else tmp='0';
 8004e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <num2str+0xd0>
 8004ea2:	2320      	movs	r3, #32
 8004ea4:	76fb      	strb	r3, [r7, #27]
 8004ea6:	e001      	b.n	8004eac <num2str+0xd4>
 8004ea8:	2330      	movs	r3, #48	@ 0x30
 8004eaa:	76fb      	strb	r3, [r7, #27]
                for (i=0;i<size-cnt;i++) p[i]=tmp;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	e007      	b.n	8004ec2 <num2str+0xea>
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	7efa      	ldrb	r2, [r7, #27]
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d3f1      	bcc.n	8004eb2 <num2str+0xda>
        }
}
 8004ece:	bf00      	nop
 8004ed0:	3724      	adds	r7, #36	@ 0x24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	2000000c 	.word	0x2000000c

08004ee0 <str2num>:

//=================================================================
unsigned int str2num(char *s, unsigned base)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
	unsigned int u=0, d;
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]
	char ch=*s++;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004ef8:	e02e      	b.n	8004f58 <str2num+0x78>
		if ((ch>='0') && (ch<='9')) d=ch-'0';
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	2b2f      	cmp	r3, #47	@ 0x2f
 8004efe:	d906      	bls.n	8004f0e <str2num+0x2e>
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
 8004f02:	2b39      	cmp	r3, #57	@ 0x39
 8004f04:	d803      	bhi.n	8004f0e <str2num+0x2e>
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	3b30      	subs	r3, #48	@ 0x30
 8004f0a:	613b      	str	r3, [r7, #16]
 8004f0c:	e018      	b.n	8004f40 <str2num+0x60>
		else if ((base==16) && (ch>='A') && (ch<='F')) d=ch-'A'+10;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d109      	bne.n	8004f28 <str2num+0x48>
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	2b40      	cmp	r3, #64	@ 0x40
 8004f18:	d906      	bls.n	8004f28 <str2num+0x48>
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	2b46      	cmp	r3, #70	@ 0x46
 8004f1e:	d803      	bhi.n	8004f28 <str2num+0x48>
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	3b37      	subs	r3, #55	@ 0x37
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	e00b      	b.n	8004f40 <str2num+0x60>
		else if ((base==16) && (ch>='a') && (ch<='f')) d=ch-'a'+10;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b10      	cmp	r3, #16
 8004f2c:	d117      	bne.n	8004f5e <str2num+0x7e>
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	2b60      	cmp	r3, #96	@ 0x60
 8004f32:	d914      	bls.n	8004f5e <str2num+0x7e>
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	2b66      	cmp	r3, #102	@ 0x66
 8004f38:	d811      	bhi.n	8004f5e <str2num+0x7e>
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	3b57      	subs	r3, #87	@ 0x57
 8004f3e:	613b      	str	r3, [r7, #16]
		else break;
		u=d+base*u;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	fb02 f303 	mul.w	r3, r2, r3
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]
		ch=*s++;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	73fb      	strb	r3, [r7, #15]
	while (ch) {
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d1cd      	bne.n	8004efa <str2num+0x1a>
	}
	return u;
 8004f5e:	697b      	ldr	r3, [r7, #20]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	371c      	adds	r7, #28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <reverse>:

//=================================================================
void reverse(char *str, int len)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
    int i=0, j=len-1, temp;
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004f80:	e018      	b.n	8004fb4 <reverse+0x48>
    {
        temp = str[i];
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	4413      	add	r3, r2
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	441a      	add	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	440b      	add	r3, r1
 8004f98:	7812      	ldrb	r2, [r2, #0]
 8004f9a:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	701a      	strb	r2, [r3, #0]
        i++; j--;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	3301      	adds	r3, #1
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	613b      	str	r3, [r7, #16]
    while (i<j)
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	dbe2      	blt.n	8004f82 <reverse+0x16>
    }
}
 8004fbc:	bf00      	nop
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
	...

08004fcc <intToStr>:

//=================================================================
int intToStr(int x, char str[], int d)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
    int i = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
    while (x)
 8004fdc:	e01d      	b.n	800501a <intToStr+0x4e>
    {
        str[i++] = (x%10) + '0';
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8005058 <intToStr+0x8c>)
 8004fe2:	fb83 1302 	smull	r1, r3, r3, r2
 8004fe6:	1099      	asrs	r1, r3, #2
 8004fe8:	17d3      	asrs	r3, r2, #31
 8004fea:	1ac9      	subs	r1, r1, r3
 8004fec:	460b      	mov	r3, r1
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	1ad1      	subs	r1, r2, r3
 8004ff6:	b2ca      	uxtb	r2, r1
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	6179      	str	r1, [r7, #20]
 8004ffe:	4619      	mov	r1, r3
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	440b      	add	r3, r1
 8005004:	3230      	adds	r2, #48	@ 0x30
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]
        x = x/10;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	4a12      	ldr	r2, [pc, #72]	@ (8005058 <intToStr+0x8c>)
 800500e:	fb82 1203 	smull	r1, r2, r2, r3
 8005012:	1092      	asrs	r2, r2, #2
 8005014:	17db      	asrs	r3, r3, #31
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	60fb      	str	r3, [r7, #12]
    while (x)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1de      	bne.n	8004fde <intToStr+0x12>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8005020:	e007      	b.n	8005032 <intToStr+0x66>
        str[i++] = '0';
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	617a      	str	r2, [r7, #20]
 8005028:	461a      	mov	r2, r3
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	4413      	add	r3, r2
 800502e:	2230      	movs	r2, #48	@ 0x30
 8005030:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	429a      	cmp	r2, r3
 8005038:	dbf3      	blt.n	8005022 <intToStr+0x56>

    reverse(str, i);
 800503a:	6979      	ldr	r1, [r7, #20]
 800503c:	68b8      	ldr	r0, [r7, #8]
 800503e:	f7ff ff95 	bl	8004f6c <reverse>
    str[i] = '\0';
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	4413      	add	r3, r2
 8005048:	2200      	movs	r2, #0
 800504a:	701a      	strb	r2, [r3, #0]
    return i;
 800504c:	697b      	ldr	r3, [r7, #20]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	66666667 	.word	0x66666667
 800505c:	00000000 	.word	0x00000000

08005060 <float2str>:
//=================================================================
void float2str( char *res, float n, int afterpoint)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	ed87 0a02 	vstr	s0, [r7, #8]
 800506c:	6079      	str	r1, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 800506e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005076:	ee17 3a90 	vmov	r3, s15
 800507a:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005086:	ed97 7a02 	vldr	s14, [r7, #8]
 800508a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800508e:	edc7 7a06 	vstr	s15, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8005092:	2200      	movs	r2, #0
 8005094:	68f9      	ldr	r1, [r7, #12]
 8005096:	69f8      	ldr	r0, [r7, #28]
 8005098:	f7ff ff98 	bl	8004fcc <intToStr>
 800509c:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d025      	beq.n	80050f0 <float2str+0x90>
    {
        res[i] = '.';  // add dot
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	222e      	movs	r2, #46	@ 0x2e
 80050ac:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter is needed
        // to handle cases like 233.007
        fpart = fpart * (float)myPow(10.0, afterpoint);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 80050f8 <float2str+0x98>
 80050b4:	f000 f824 	bl	8005100 <myPow>
 80050b8:	ec53 2b10 	vmov	r2, r3, d0
 80050bc:	4610      	mov	r0, r2
 80050be:	4619      	mov	r1, r3
 80050c0:	f7fb fc58 	bl	8000974 <__aeabi_d2f>
 80050c4:	ee07 0a10 	vmov	s14, r0
 80050c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80050cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050d0:	edc7 7a06 	vstr	s15, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80050d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80050d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	3301      	adds	r3, #1
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	4619      	mov	r1, r3
 80050e8:	ee17 0a90 	vmov	r0, s15
 80050ec:	f7ff ff6e 	bl	8004fcc <intToStr>
    }
}
 80050f0:	bf00      	nop
 80050f2:	3720      	adds	r7, #32
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	00000000 	.word	0x00000000
 80050fc:	40240000 	.word	0x40240000

08005100 <myPow>:
//=================================================================
double myPow(double x, int n) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	ed87 0b02 	vstr	d0, [r7, #8]
 800510a:	6078      	str	r0, [r7, #4]
    unsigned int p = abs(n);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	bfb8      	it	lt
 8005112:	425b      	neglt	r3, r3
 8005114:	61fb      	str	r3, [r7, #28]
    double result = 1;
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	4b1d      	ldr	r3, [pc, #116]	@ (8005190 <myPow+0x90>)
 800511c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    while(p > 0)
 8005120:	e01b      	b.n	800515a <myPow+0x5a>
    {
        if(p & 1) // if bit is set
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d009      	beq.n	8005140 <myPow+0x40>
        {
            result = result * x;
 800512c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005130:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005134:	f7fb fa0c 	bl	8000550 <__aeabi_dmul>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        }
        p = p >> 1;
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	61fb      	str	r3, [r7, #28]
        x = x * x;
 8005146:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800514a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800514e:	f7fb f9ff 	bl	8000550 <__aeabi_dmul>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(p > 0)
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e0      	bne.n	8005122 <myPow+0x22>
    }

    if(n < 0)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	da09      	bge.n	800517a <myPow+0x7a>
    {
        return 1/result;
 8005166:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800516a:	f04f 0000 	mov.w	r0, #0
 800516e:	4908      	ldr	r1, [pc, #32]	@ (8005190 <myPow+0x90>)
 8005170:	f7fb fb18 	bl	80007a4 <__aeabi_ddiv>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	e001      	b.n	800517e <myPow+0x7e>
    }
    return result;
 800517a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800517e:	ec43 2b17 	vmov	d7, r2, r3
 8005182:	eeb0 0a47 	vmov.f32	s0, s14
 8005186:	eef0 0a67 	vmov.f32	s1, s15
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	3ff00000 	.word	0x3ff00000

08005194 <uart1_Init>:
//=================================================================
//	UART 1 INIT (ZIGBEE)
//=================================================================

void uart1_Init()
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
	  Uart1Handle.Instance          = USART1;
 8005198:	4b11      	ldr	r3, [pc, #68]	@ (80051e0 <uart1_Init+0x4c>)
 800519a:	4a12      	ldr	r2, [pc, #72]	@ (80051e4 <uart1_Init+0x50>)
 800519c:	601a      	str	r2, [r3, #0]

	  Uart1Handle.Init.BaudRate     = 115200;
 800519e:	4b10      	ldr	r3, [pc, #64]	@ (80051e0 <uart1_Init+0x4c>)
 80051a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80051a4:	605a      	str	r2, [r3, #4]
	  Uart1Handle.Init.WordLength   = UART_WORDLENGTH_8B;
 80051a6:	4b0e      	ldr	r3, [pc, #56]	@ (80051e0 <uart1_Init+0x4c>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	609a      	str	r2, [r3, #8]
	  Uart1Handle.Init.StopBits     = UART_STOPBITS_1;
 80051ac:	4b0c      	ldr	r3, [pc, #48]	@ (80051e0 <uart1_Init+0x4c>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	60da      	str	r2, [r3, #12]
	  Uart1Handle.Init.Parity       = UART_PARITY_NONE;
 80051b2:	4b0b      	ldr	r3, [pc, #44]	@ (80051e0 <uart1_Init+0x4c>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	611a      	str	r2, [r3, #16]
	  Uart1Handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80051b8:	4b09      	ldr	r3, [pc, #36]	@ (80051e0 <uart1_Init+0x4c>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	619a      	str	r2, [r3, #24]
	  Uart1Handle.Init.Mode         = UART_MODE_TX_RX;
 80051be:	4b08      	ldr	r3, [pc, #32]	@ (80051e0 <uart1_Init+0x4c>)
 80051c0:	220c      	movs	r2, #12
 80051c2:	615a      	str	r2, [r3, #20]
	  Uart1Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 80051c4:	4b06      	ldr	r3, [pc, #24]	@ (80051e0 <uart1_Init+0x4c>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart1Handle);
 80051ca:	4805      	ldr	r0, [pc, #20]	@ (80051e0 <uart1_Init+0x4c>)
 80051cc:	f7fe fa96 	bl	80036fc <HAL_UART_Init>

	  HAL_UART_Receive_IT(&Uart1Handle, (uint8_t *)rec_buf1, 2);
 80051d0:	2202      	movs	r2, #2
 80051d2:	4905      	ldr	r1, [pc, #20]	@ (80051e8 <uart1_Init+0x54>)
 80051d4:	4802      	ldr	r0, [pc, #8]	@ (80051e0 <uart1_Init+0x4c>)
 80051d6:	f7fe fb81 	bl	80038dc <HAL_UART_Receive_IT>
}
 80051da:	bf00      	nop
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	200000f0 	.word	0x200000f0
 80051e4:	40011000 	.word	0x40011000
 80051e8:	20000060 	.word	0x20000060

080051ec <uart2_Init>:
//=================================================================
//	UART 2 INIT (STLINK UART)
//=================================================================
void uart2_Init()
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
	  Uart2Handle.Instance          = USART2;
 80051f0:	4b11      	ldr	r3, [pc, #68]	@ (8005238 <uart2_Init+0x4c>)
 80051f2:	4a12      	ldr	r2, [pc, #72]	@ (800523c <uart2_Init+0x50>)
 80051f4:	601a      	str	r2, [r3, #0]

	  Uart2Handle.Init.BaudRate     = USART2_BAUDRATE;
 80051f6:	4b10      	ldr	r3, [pc, #64]	@ (8005238 <uart2_Init+0x4c>)
 80051f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80051fc:	605a      	str	r2, [r3, #4]
	  Uart2Handle.Init.WordLength   = UART_WORDLENGTH_8B;
 80051fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005238 <uart2_Init+0x4c>)
 8005200:	2200      	movs	r2, #0
 8005202:	609a      	str	r2, [r3, #8]
	  Uart2Handle.Init.StopBits     = UART_STOPBITS_1;
 8005204:	4b0c      	ldr	r3, [pc, #48]	@ (8005238 <uart2_Init+0x4c>)
 8005206:	2200      	movs	r2, #0
 8005208:	60da      	str	r2, [r3, #12]
	  Uart2Handle.Init.Parity       = UART_PARITY_NONE;
 800520a:	4b0b      	ldr	r3, [pc, #44]	@ (8005238 <uart2_Init+0x4c>)
 800520c:	2200      	movs	r2, #0
 800520e:	611a      	str	r2, [r3, #16]
	  Uart2Handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8005210:	4b09      	ldr	r3, [pc, #36]	@ (8005238 <uart2_Init+0x4c>)
 8005212:	2200      	movs	r2, #0
 8005214:	619a      	str	r2, [r3, #24]
	  Uart2Handle.Init.Mode         = UART_MODE_TX_RX;
 8005216:	4b08      	ldr	r3, [pc, #32]	@ (8005238 <uart2_Init+0x4c>)
 8005218:	220c      	movs	r2, #12
 800521a:	615a      	str	r2, [r3, #20]
	  Uart2Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 800521c:	4b06      	ldr	r3, [pc, #24]	@ (8005238 <uart2_Init+0x4c>)
 800521e:	2200      	movs	r2, #0
 8005220:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart2Handle);
 8005222:	4805      	ldr	r0, [pc, #20]	@ (8005238 <uart2_Init+0x4c>)
 8005224:	f7fe fa6a 	bl	80036fc <HAL_UART_Init>

	  HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf2, 1);
 8005228:	2201      	movs	r2, #1
 800522a:	4905      	ldr	r1, [pc, #20]	@ (8005240 <uart2_Init+0x54>)
 800522c:	4802      	ldr	r0, [pc, #8]	@ (8005238 <uart2_Init+0x4c>)
 800522e:	f7fe fb55 	bl	80038dc <HAL_UART_Receive_IT>
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200000b0 	.word	0x200000b0
 800523c:	40004400 	.word	0x40004400
 8005240:	20000064 	.word	0x20000064

08005244 <uart6_Init>:
//=================================================================
//	UART 6 INIT ( DXL )
//=================================================================

void uart6_Init()
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
	  Uart6Handle.Instance          = USART6;
 8005248:	4b11      	ldr	r3, [pc, #68]	@ (8005290 <uart6_Init+0x4c>)
 800524a:	4a12      	ldr	r2, [pc, #72]	@ (8005294 <uart6_Init+0x50>)
 800524c:	601a      	str	r2, [r3, #0]

	  Uart6Handle.Init.BaudRate     =57600;//1000000;//57600;
 800524e:	4b10      	ldr	r3, [pc, #64]	@ (8005290 <uart6_Init+0x4c>)
 8005250:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8005254:	605a      	str	r2, [r3, #4]
	  Uart6Handle.Init.WordLength   = UART_WORDLENGTH_8B;
 8005256:	4b0e      	ldr	r3, [pc, #56]	@ (8005290 <uart6_Init+0x4c>)
 8005258:	2200      	movs	r2, #0
 800525a:	609a      	str	r2, [r3, #8]
	  Uart6Handle.Init.StopBits     = UART_STOPBITS_1;
 800525c:	4b0c      	ldr	r3, [pc, #48]	@ (8005290 <uart6_Init+0x4c>)
 800525e:	2200      	movs	r2, #0
 8005260:	60da      	str	r2, [r3, #12]
	  Uart6Handle.Init.Parity       = UART_PARITY_NONE;
 8005262:	4b0b      	ldr	r3, [pc, #44]	@ (8005290 <uart6_Init+0x4c>)
 8005264:	2200      	movs	r2, #0
 8005266:	611a      	str	r2, [r3, #16]
	  Uart6Handle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8005268:	4b09      	ldr	r3, [pc, #36]	@ (8005290 <uart6_Init+0x4c>)
 800526a:	2200      	movs	r2, #0
 800526c:	619a      	str	r2, [r3, #24]
	  Uart6Handle.Init.Mode         = UART_MODE_TX_RX;
 800526e:	4b08      	ldr	r3, [pc, #32]	@ (8005290 <uart6_Init+0x4c>)
 8005270:	220c      	movs	r2, #12
 8005272:	615a      	str	r2, [r3, #20]
	  Uart6Handle.Init.OverSampling = UART_OVERSAMPLING_16;
 8005274:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <uart6_Init+0x4c>)
 8005276:	2200      	movs	r2, #0
 8005278:	61da      	str	r2, [r3, #28]

	  HAL_UART_Init(&Uart6Handle);
 800527a:	4805      	ldr	r0, [pc, #20]	@ (8005290 <uart6_Init+0x4c>)
 800527c:	f7fe fa3e 	bl	80036fc <HAL_UART_Init>

	  HAL_UART_Receive_IT(&Uart6Handle, (uint8_t *)rec_buf6, 1);
 8005280:	2201      	movs	r2, #1
 8005282:	4905      	ldr	r1, [pc, #20]	@ (8005298 <uart6_Init+0x54>)
 8005284:	4802      	ldr	r0, [pc, #8]	@ (8005290 <uart6_Init+0x4c>)
 8005286:	f7fe fb29 	bl	80038dc <HAL_UART_Receive_IT>
}
 800528a:	bf00      	nop
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20000070 	.word	0x20000070
 8005294:	40011400 	.word	0x40011400
 8005298:	20000068 	.word	0x20000068

0800529c <put_char>:

//=================================================================
//	PUCHAR PROTOTYPE (USED BY PRINTF FUNCTIONS)
//=================================================================
int put_char(char ch)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	4603      	mov	r3, r0
 80052a4:	71fb      	strb	r3, [r7, #7]
#if USE_USART_STLINK
	HAL_UART_Transmit(&Uart2Handle, (uint8_t *)&ch, 1, 0xFFFF);
 80052a6:	1df9      	adds	r1, r7, #7
 80052a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052ac:	2201      	movs	r2, #1
 80052ae:	4804      	ldr	r0, [pc, #16]	@ (80052c0 <put_char+0x24>)
 80052b0:	f7fe fa7b 	bl	80037aa <HAL_UART_Transmit>
#else
	HAL_UART_Transmit(&Uart1Handle, (uint8_t *)&ch, 1, 0xFFFF);
#endif
  return 0;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	200000b0 	.word	0x200000b0

080052c4 <putchar_zigbee>:
	HAL_UART_Transmit(&Uart2Handle, (uint8_t *)&ch, 1, 0xFFFF);
	return 0;
}

int putchar_zigbee(char ch)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	4603      	mov	r3, r0
 80052cc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&Uart1Handle, (uint8_t *)&ch, 1, 0xFFFF);
 80052ce:	1df9      	adds	r1, r7, #7
 80052d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052d4:	2201      	movs	r2, #1
 80052d6:	4804      	ldr	r0, [pc, #16]	@ (80052e8 <putchar_zigbee+0x24>)
 80052d8:	f7fe fa67 	bl	80037aa <HAL_UART_Transmit>
	return 0;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	200000f0 	.word	0x200000f0

080052ec <HAL_UART_RxCpltCallback>:

//=================================================================
//	UART RECEIVE CALLBACK5
//=================================================================
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
	if (UartHandle -> Instance == USART6)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a15      	ldr	r2, [pc, #84]	@ (8005350 <HAL_UART_RxCpltCallback+0x64>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d10a      	bne.n	8005314 <HAL_UART_RxCpltCallback+0x28>
	{
		HAL_UART_Receive_IT(&Uart6Handle, (uint8_t *)rec_buf6, 1);
 80052fe:	2201      	movs	r2, #1
 8005300:	4914      	ldr	r1, [pc, #80]	@ (8005354 <HAL_UART_RxCpltCallback+0x68>)
 8005302:	4815      	ldr	r0, [pc, #84]	@ (8005358 <HAL_UART_RxCpltCallback+0x6c>)
 8005304:	f7fe faea 	bl	80038dc <HAL_UART_Receive_IT>
		dxl_rcv_cb(rec_buf6[0]);
 8005308:	4b12      	ldr	r3, [pc, #72]	@ (8005354 <HAL_UART_RxCpltCallback+0x68>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	4618      	mov	r0, r3
 800530e:	f7ff f96d 	bl	80045ec <dxl_rcv_cb>
			HAL_UART_Receive_IT(&Uart1Handle, (uint8_t *)rec_buf1, 1);
			speed_received = rec_buf1[0];
		}*/

	}
}
 8005312:	e018      	b.n	8005346 <HAL_UART_RxCpltCallback+0x5a>
	if (UartHandle -> Instance == USART2)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a10      	ldr	r2, [pc, #64]	@ (800535c <HAL_UART_RxCpltCallback+0x70>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d105      	bne.n	800532a <HAL_UART_RxCpltCallback+0x3e>
		HAL_UART_Receive_IT(&Uart2Handle, (uint8_t *)rec_buf2, 1);
 800531e:	2201      	movs	r2, #1
 8005320:	490f      	ldr	r1, [pc, #60]	@ (8005360 <HAL_UART_RxCpltCallback+0x74>)
 8005322:	4810      	ldr	r0, [pc, #64]	@ (8005364 <HAL_UART_RxCpltCallback+0x78>)
 8005324:	f7fe fada 	bl	80038dc <HAL_UART_Receive_IT>
}
 8005328:	e00d      	b.n	8005346 <HAL_UART_RxCpltCallback+0x5a>
	if (UartHandle -> Instance == USART1)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a0e      	ldr	r2, [pc, #56]	@ (8005368 <HAL_UART_RxCpltCallback+0x7c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d108      	bne.n	8005346 <HAL_UART_RxCpltCallback+0x5a>
		HAL_UART_Receive_IT(&Uart1Handle, (uint8_t *)rec_buf1, 2);
 8005334:	2202      	movs	r2, #2
 8005336:	490d      	ldr	r1, [pc, #52]	@ (800536c <HAL_UART_RxCpltCallback+0x80>)
 8005338:	480d      	ldr	r0, [pc, #52]	@ (8005370 <HAL_UART_RxCpltCallback+0x84>)
 800533a:	f7fe facf 	bl	80038dc <HAL_UART_Receive_IT>
		car_received=rec_buf1[0];
 800533e:	4b0b      	ldr	r3, [pc, #44]	@ (800536c <HAL_UART_RxCpltCallback+0x80>)
 8005340:	781a      	ldrb	r2, [r3, #0]
 8005342:	4b0c      	ldr	r3, [pc, #48]	@ (8005374 <HAL_UART_RxCpltCallback+0x88>)
 8005344:	701a      	strb	r2, [r3, #0]
}
 8005346:	bf00      	nop
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40011400 	.word	0x40011400
 8005354:	20000068 	.word	0x20000068
 8005358:	20000070 	.word	0x20000070
 800535c:	40004400 	.word	0x40004400
 8005360:	20000064 	.word	0x20000064
 8005364:	200000b0 	.word	0x200000b0
 8005368:	40011000 	.word	0x40011000
 800536c:	20000060 	.word	0x20000060
 8005370:	200000f0 	.word	0x200000f0
 8005374:	2000006a 	.word	0x2000006a

08005378 <put_string_zigbee>:
		s++;
	}
}

void put_string_zigbee(char* s)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	while(*s != '\0')
 8005380:	e007      	b.n	8005392 <put_string_zigbee+0x1a>
	{
		putchar_zigbee(*s);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff ff9c 	bl	80052c4 <putchar_zigbee>
		s++;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3301      	adds	r3, #1
 8005390:	607b      	str	r3, [r7, #4]
	while(*s != '\0')
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1f3      	bne.n	8005382 <put_string_zigbee+0xa>
	}
}
 800539a:	bf00      	nop
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <sendFrame>:

void sendFrame(unsigned char* s, int size)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&Uart6Handle, s, size, 0xFFFF);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	4803      	ldr	r0, [pc, #12]	@ (80053c8 <sendFrame+0x24>)
 80053ba:	f7fe f9f6 	bl	80037aa <HAL_UART_Transmit>
}
 80053be:	bf00      	nop
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	20000070 	.word	0x20000070
 80053cc:	00000000 	.word	0x00000000

080053d0 <term_printf_zigbee>:
	}
	va_end(ap);
}
//=====================================================
void term_printf_zigbee(const char* fmt, ...)
{
 80053d0:	b40f      	push	{r0, r1, r2, r3}
 80053d2:	b5b0      	push	{r4, r5, r7, lr}
 80053d4:	b09e      	sub	sp, #120	@ 0x78
 80053d6:	af02      	add	r7, sp, #8
	unsigned long  ul;
	unsigned long long ull;
	unsigned long  size;
	unsigned int   sp;
	char           s[34];
	int first=0;
 80053d8:	2300      	movs	r3, #0
 80053da:	65fb      	str	r3, [r7, #92]	@ 0x5c


	va_start(ap, fmt);
 80053dc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80053e0:	633b      	str	r3, [r7, #48]	@ 0x30
	while (*fmt != '\0') {
 80053e2:	e1c0      	b.n	8005766 <term_printf_zigbee+0x396>
		if (*fmt =='%') {
 80053e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b25      	cmp	r3, #37	@ 0x25
 80053ec:	f040 81b0 	bne.w	8005750 <term_printf_zigbee+0x380>
			size=0; sp=1;
 80053f0:	2300      	movs	r3, #0
 80053f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80053f4:	2301      	movs	r3, #1
 80053f6:	663b      	str	r3, [r7, #96]	@ 0x60
			if (*++fmt=='0') {fmt++; sp=0;}	// parse %04d --> sp=0
 80053f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80053fc:	3301      	adds	r3, #1
 80053fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005402:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b30      	cmp	r3, #48	@ 0x30
 800540a:	d106      	bne.n	800541a <term_printf_zigbee+0x4a>
 800540c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005410:	3301      	adds	r3, #1
 8005412:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005416:	2300      	movs	r3, #0
 8005418:	663b      	str	r3, [r7, #96]	@ 0x60
			ch=*fmt;
 800541a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			if ((ch>'0') && (ch<='9')) {	// parse %4d --> size=4
 8005424:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8005428:	2b30      	cmp	r3, #48	@ 0x30
 800542a:	d92c      	bls.n	8005486 <term_printf_zigbee+0xb6>
 800542c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8005430:	2b39      	cmp	r3, #57	@ 0x39
 8005432:	d828      	bhi.n	8005486 <term_printf_zigbee+0xb6>
				char tmp[10];
				int i=0;
 8005434:	2300      	movs	r3, #0
 8005436:	65bb      	str	r3, [r7, #88]	@ 0x58
				while ((ch>='0') && (ch<='9')) {
 8005438:	e012      	b.n	8005460 <term_printf_zigbee+0x90>
					tmp[i++]=ch;
 800543a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005440:	3370      	adds	r3, #112	@ 0x70
 8005442:	443b      	add	r3, r7
 8005444:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8005448:	f803 2c70 	strb.w	r2, [r3, #-112]
					ch=*++fmt;
 800544c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005450:	3301      	adds	r3, #1
 8005452:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005456:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
				while ((ch>='0') && (ch<='9')) {
 8005460:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8005464:	2b2f      	cmp	r3, #47	@ 0x2f
 8005466:	d903      	bls.n	8005470 <term_printf_zigbee+0xa0>
 8005468:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800546c:	2b39      	cmp	r3, #57	@ 0x39
 800546e:	d9e4      	bls.n	800543a <term_printf_zigbee+0x6a>
				}
				tmp[i]='\0';
 8005470:	463a      	mov	r2, r7
 8005472:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005474:	4413      	add	r3, r2
 8005476:	2200      	movs	r2, #0
 8005478:	701a      	strb	r2, [r3, #0]
				size=str2num(tmp,10);
 800547a:	463b      	mov	r3, r7
 800547c:	210a      	movs	r1, #10
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fd2e 	bl	8004ee0 <str2num>
 8005484:	6678      	str	r0, [r7, #100]	@ 0x64
			}
			switch (ch) {
 8005486:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800548a:	2b25      	cmp	r3, #37	@ 0x25
 800548c:	d03c      	beq.n	8005508 <term_printf_zigbee+0x138>
 800548e:	2b25      	cmp	r3, #37	@ 0x25
 8005490:	f2c0 8157 	blt.w	8005742 <term_printf_zigbee+0x372>
 8005494:	2b78      	cmp	r3, #120	@ 0x78
 8005496:	f300 8154 	bgt.w	8005742 <term_printf_zigbee+0x372>
 800549a:	2b63      	cmp	r3, #99	@ 0x63
 800549c:	f2c0 8151 	blt.w	8005742 <term_printf_zigbee+0x372>
 80054a0:	3b63      	subs	r3, #99	@ 0x63
 80054a2:	2b15      	cmp	r3, #21
 80054a4:	f200 814d 	bhi.w	8005742 <term_printf_zigbee+0x372>
 80054a8:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <term_printf_zigbee+0xe0>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	08005511 	.word	0x08005511
 80054b4:	0800553b 	.word	0x0800553b
 80054b8:	08005743 	.word	0x08005743
 80054bc:	08005621 	.word	0x08005621
 80054c0:	08005743 	.word	0x08005743
 80054c4:	08005743 	.word	0x08005743
 80054c8:	08005743 	.word	0x08005743
 80054cc:	08005743 	.word	0x08005743
 80054d0:	08005743 	.word	0x08005743
 80054d4:	08005743 	.word	0x08005743
 80054d8:	08005743 	.word	0x08005743
 80054dc:	08005743 	.word	0x08005743
 80054e0:	0800559d 	.word	0x0800559d
 80054e4:	080055c5 	.word	0x080055c5
 80054e8:	08005743 	.word	0x08005743
 80054ec:	08005743 	.word	0x08005743
 80054f0:	08005529 	.word	0x08005529
 80054f4:	08005743 	.word	0x08005743
 80054f8:	08005575 	.word	0x08005575
 80054fc:	08005743 	.word	0x08005743
 8005500:	08005743 	.word	0x08005743
 8005504:	080055f9 	.word	0x080055f9
				case '%':
					 putchar_zigbee('%');
 8005508:	2025      	movs	r0, #37	@ 0x25
 800550a:	f7ff fedb 	bl	80052c4 <putchar_zigbee>
					break;
 800550e:	e125      	b.n	800575c <term_printf_zigbee+0x38c>
				case 'c':
					ch = va_arg(ap, int);
 8005510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005512:	1d1a      	adds	r2, r3, #4
 8005514:	633a      	str	r2, [r7, #48]	@ 0x30
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					putchar_zigbee(ch);
 800551c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff fecf 	bl	80052c4 <putchar_zigbee>
					break;
 8005526:	e119      	b.n	800575c <term_printf_zigbee+0x38c>
				case 's':
					p = va_arg(ap, char *);
 8005528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552a:	1d1a      	adds	r2, r3, #4
 800552c:	633a      	str	r2, [r7, #48]	@ 0x30
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	657b      	str	r3, [r7, #84]	@ 0x54
					put_string_zigbee(p);
 8005532:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005534:	f7ff ff20 	bl	8005378 <put_string_zigbee>
					break;
 8005538:	e110      	b.n	800575c <term_printf_zigbee+0x38c>
				case 'd':
					ul = va_arg(ap, long);
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	1d1a      	adds	r2, r3, #4
 800553e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	66bb      	str	r3, [r7, #104]	@ 0x68
					if ((long)ul < 0) {
 8005544:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005546:	2b00      	cmp	r3, #0
 8005548:	da05      	bge.n	8005556 <term_printf_zigbee+0x186>
						putchar_zigbee('-');
 800554a:	202d      	movs	r0, #45	@ 0x2d
 800554c:	f7ff feba 	bl	80052c4 <putchar_zigbee>
						ul = -(long)ul;
 8005550:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005552:	425b      	negs	r3, r3
 8005554:	66bb      	str	r3, [r7, #104]	@ 0x68
						//size--;
					}
					num2str(s, ul, 10, size, sp);
 8005556:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005558:	f107 000c 	add.w	r0, r7, #12
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005560:	220a      	movs	r2, #10
 8005562:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005564:	f7ff fc38 	bl	8004dd8 <num2str>
					put_string_zigbee(s);
 8005568:	f107 030c 	add.w	r3, r7, #12
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff ff03 	bl	8005378 <put_string_zigbee>
					break;
 8005572:	e0f3      	b.n	800575c <term_printf_zigbee+0x38c>
				case 'u':
					ul = va_arg(ap, unsigned int);
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	633a      	str	r2, [r7, #48]	@ 0x30
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	66bb      	str	r3, [r7, #104]	@ 0x68
					num2str(s, ul, 10, size, sp);
 800557e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005580:	f107 000c 	add.w	r0, r7, #12
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005588:	220a      	movs	r2, #10
 800558a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800558c:	f7ff fc24 	bl	8004dd8 <num2str>
					put_string_zigbee(s);
 8005590:	f107 030c 	add.w	r3, r7, #12
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff feef 	bl	8005378 <put_string_zigbee>
					break;
 800559a:	e0df      	b.n	800575c <term_printf_zigbee+0x38c>
				case 'o':
					ul = va_arg(ap, unsigned int);
 800559c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559e:	1d1a      	adds	r2, r3, #4
 80055a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	66bb      	str	r3, [r7, #104]	@ 0x68
					num2str(s, ul, 8, size, sp);
 80055a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055a8:	f107 000c 	add.w	r0, r7, #12
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055b0:	2208      	movs	r2, #8
 80055b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055b4:	f7ff fc10 	bl	8004dd8 <num2str>
					put_string_zigbee(s);
 80055b8:	f107 030c 	add.w	r3, r7, #12
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff fedb 	bl	8005378 <put_string_zigbee>
					break;
 80055c2:	e0cb      	b.n	800575c <term_printf_zigbee+0x38c>
				case 'p':
					putchar_zigbee('0');
 80055c4:	2030      	movs	r0, #48	@ 0x30
 80055c6:	f7ff fe7d 	bl	80052c4 <putchar_zigbee>
					putchar_zigbee('x');
 80055ca:	2078      	movs	r0, #120	@ 0x78
 80055cc:	f7ff fe7a 	bl	80052c4 <putchar_zigbee>
					ul = va_arg(ap, unsigned int);
 80055d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d2:	1d1a      	adds	r2, r3, #4
 80055d4:	633a      	str	r2, [r7, #48]	@ 0x30
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	66bb      	str	r3, [r7, #104]	@ 0x68
					num2str(s, ul, 16, size, sp);
 80055da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055dc:	f107 000c 	add.w	r0, r7, #12
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055e4:	2210      	movs	r2, #16
 80055e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055e8:	f7ff fbf6 	bl	8004dd8 <num2str>
					put_string_zigbee(s);
 80055ec:	f107 030c 	add.w	r3, r7, #12
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff fec1 	bl	8005378 <put_string_zigbee>
					break;
 80055f6:	e0b1      	b.n	800575c <term_printf_zigbee+0x38c>
				case 'x':
					ul = va_arg(ap, unsigned int);
 80055f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fa:	1d1a      	adds	r2, r3, #4
 80055fc:	633a      	str	r2, [r7, #48]	@ 0x30
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	66bb      	str	r3, [r7, #104]	@ 0x68
					num2str(s, ul, 16, size, sp);
 8005602:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005604:	f107 000c 	add.w	r0, r7, #12
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800560c:	2210      	movs	r2, #16
 800560e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005610:	f7ff fbe2 	bl	8004dd8 <num2str>
					put_string_zigbee(s);
 8005614:	f107 030c 	add.w	r3, r7, #12
 8005618:	4618      	mov	r0, r3
 800561a:	f7ff fead 	bl	8005378 <put_string_zigbee>
					break;
 800561e:	e09d      	b.n	800575c <term_printf_zigbee+0x38c>
				case 'f':
					if(first==0){ ull = va_arg(ap, long long unsigned int); first = 1;}
 8005620:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10c      	bne.n	8005640 <term_printf_zigbee+0x270>
 8005626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005628:	3307      	adds	r3, #7
 800562a:	f023 0307 	bic.w	r3, r3, #7
 800562e:	f103 0208 	add.w	r2, r3, #8
 8005632:	633a      	str	r2, [r7, #48]	@ 0x30
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800563c:	2301      	movs	r3, #1
 800563e:	65fb      	str	r3, [r7, #92]	@ 0x5c
					ull = va_arg(ap, long long unsigned int);
 8005640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005642:	3307      	adds	r3, #7
 8005644:	f023 0307 	bic.w	r3, r3, #7
 8005648:	f103 0208 	add.w	r2, r3, #8
 800564c:	633a      	str	r2, [r7, #48]	@ 0x30
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
					int sign = ( ull & 0x80000000 ) >> 31;
 8005656:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	0fc2      	lsrs	r2, r0, #31
 8005664:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8005668:	0fcb      	lsrs	r3, r1, #31
 800566a:	4613      	mov	r3, r2
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	647b      	str	r3, [r7, #68]	@ 0x44
					int m = (ull & 0x000FFFFF) ; // should be 0x007FFFFF
 8005672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005678:	643b      	str	r3, [r7, #64]	@ 0x40
					float mf = (float)m ;
 800567a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005684:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
					mf = mf / pow(2.0,20.0);
 8005688:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800568c:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8005790 <term_printf_zigbee+0x3c0>
 8005690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005694:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
					mf = mf + 1.0;
 8005698:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800569c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80056a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80056a4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
					int e = ( ull & 0x78000000 ) >> 23 ; // should be int e = ( ul & 0x7F800000 ) >> 23;
 80056a8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	0dc2      	lsrs	r2, r0, #23
 80056b6:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80056ba:	0dcb      	lsrs	r3, r1, #23
 80056bc:	4613      	mov	r3, r2
 80056be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056c2:	63bb      	str	r3, [r7, #56]	@ 0x38
					e = e | (( ull & 0x000F00000 ) >> 20);
 80056c4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	f04f 0300 	mov.w	r3, #0
 80056d0:	0d02      	lsrs	r2, r0, #20
 80056d2:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80056d6:	0d0b      	lsrs	r3, r1, #20
 80056d8:	4613      	mov	r3, r2
 80056da:	f003 020f 	and.w	r2, r3, #15
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	4313      	orrs	r3, r2
 80056e2:	63bb      	str	r3, [r7, #56]	@ 0x38
					e = e - 127;
 80056e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e6:	3b7f      	subs	r3, #127	@ 0x7f
 80056e8:	63bb      	str	r3, [r7, #56]	@ 0x38
					float f = mf*myPow(2.0,e);
 80056ea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80056ec:	f7fa fed8 	bl	80004a0 <__aeabi_f2d>
 80056f0:	4604      	mov	r4, r0
 80056f2:	460d      	mov	r5, r1
 80056f4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80056f6:	ed9f 0b24 	vldr	d0, [pc, #144]	@ 8005788 <term_printf_zigbee+0x3b8>
 80056fa:	f7ff fd01 	bl	8005100 <myPow>
 80056fe:	ec53 2b10 	vmov	r2, r3, d0
 8005702:	4620      	mov	r0, r4
 8005704:	4629      	mov	r1, r5
 8005706:	f7fa ff23 	bl	8000550 <__aeabi_dmul>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	4610      	mov	r0, r2
 8005710:	4619      	mov	r1, r3
 8005712:	f7fb f92f 	bl	8000974 <__aeabi_d2f>
 8005716:	4603      	mov	r3, r0
 8005718:	637b      	str	r3, [r7, #52]	@ 0x34
					if(sign==1){ put_char('-'); }
 800571a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800571c:	2b01      	cmp	r3, #1
 800571e:	d102      	bne.n	8005726 <term_printf_zigbee+0x356>
 8005720:	202d      	movs	r0, #45	@ 0x2d
 8005722:	f7ff fdbb 	bl	800529c <put_char>
					float2str((char*)s, f, 5);
 8005726:	f107 030c 	add.w	r3, r7, #12
 800572a:	2105      	movs	r1, #5
 800572c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff fc95 	bl	8005060 <float2str>
					put_string_zigbee((char*)s);
 8005736:	f107 030c 	add.w	r3, r7, #12
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff fe1c 	bl	8005378 <put_string_zigbee>
					break;
 8005740:	e00c      	b.n	800575c <term_printf_zigbee+0x38c>
				default:
					putchar_zigbee(*fmt);
 8005742:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f7ff fdbb 	bl	80052c4 <putchar_zigbee>
 800574e:	e005      	b.n	800575c <term_printf_zigbee+0x38c>
			}
		} else putchar_zigbee(*fmt);
 8005750:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff fdb4 	bl	80052c4 <putchar_zigbee>
		fmt++;
 800575c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005760:	3301      	adds	r3, #1
 8005762:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	while (*fmt != '\0') {
 8005766:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	f47f ae39 	bne.w	80053e4 <term_printf_zigbee+0x14>
	}
	va_end(ap);
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	3770      	adds	r7, #112	@ 0x70
 8005778:	46bd      	mov	sp, r7
 800577a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800577e:	b004      	add	sp, #16
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	f3af 8000 	nop.w
 8005788:	00000000 	.word	0x00000000
 800578c:	40000000 	.word	0x40000000
 8005790:	49800000 	.word	0x49800000

08005794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005794:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80057cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005798:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800579a:	e003      	b.n	80057a4 <LoopCopyDataInit>

0800579c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800579c:	4b0c      	ldr	r3, [pc, #48]	@ (80057d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800579e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80057a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80057a2:	3104      	adds	r1, #4

080057a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80057a4:	480b      	ldr	r0, [pc, #44]	@ (80057d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80057a6:	4b0c      	ldr	r3, [pc, #48]	@ (80057d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80057a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80057aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80057ac:	d3f6      	bcc.n	800579c <CopyDataInit>
  ldr  r2, =_sbss
 80057ae:	4a0b      	ldr	r2, [pc, #44]	@ (80057dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80057b0:	e002      	b.n	80057b8 <LoopFillZerobss>

080057b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80057b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80057b4:	f842 3b04 	str.w	r3, [r2], #4

080057b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80057b8:	4b09      	ldr	r3, [pc, #36]	@ (80057e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80057ba:	429a      	cmp	r2, r3
    bcc  FillZerobss
 80057bc:	d3f9      	bcc.n	80057b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80057be:	f7ff fad5 	bl	8004d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057c2:	f000 f811 	bl	80057e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057c6:	f7fe ff3f 	bl	8004648 <main>
  bx  lr    
 80057ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80057cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80057d0:	08005b14 	.word	0x08005b14
  ldr  r0, =_sdata
 80057d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80057d8:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 80057dc:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 80057e0:	200003d8 	.word	0x200003d8

080057e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057e4:	e7fe      	b.n	80057e4 <ADC_IRQHandler>
	...

080057e8 <__libc_init_array>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005820 <__libc_init_array+0x38>)
 80057ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005824 <__libc_init_array+0x3c>)
 80057ee:	1b64      	subs	r4, r4, r5
 80057f0:	10a4      	asrs	r4, r4, #2
 80057f2:	2600      	movs	r6, #0
 80057f4:	42a6      	cmp	r6, r4
 80057f6:	d109      	bne.n	800580c <__libc_init_array+0x24>
 80057f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005828 <__libc_init_array+0x40>)
 80057fa:	4c0c      	ldr	r4, [pc, #48]	@ (800582c <__libc_init_array+0x44>)
 80057fc:	f000 f826 	bl	800584c <_init>
 8005800:	1b64      	subs	r4, r4, r5
 8005802:	10a4      	asrs	r4, r4, #2
 8005804:	2600      	movs	r6, #0
 8005806:	42a6      	cmp	r6, r4
 8005808:	d105      	bne.n	8005816 <__libc_init_array+0x2e>
 800580a:	bd70      	pop	{r4, r5, r6, pc}
 800580c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005810:	4798      	blx	r3
 8005812:	3601      	adds	r6, #1
 8005814:	e7ee      	b.n	80057f4 <__libc_init_array+0xc>
 8005816:	f855 3b04 	ldr.w	r3, [r5], #4
 800581a:	4798      	blx	r3
 800581c:	3601      	adds	r6, #1
 800581e:	e7f2      	b.n	8005806 <__libc_init_array+0x1e>
 8005820:	08005b0c 	.word	0x08005b0c
 8005824:	08005b0c 	.word	0x08005b0c
 8005828:	08005b0c 	.word	0x08005b0c
 800582c:	08005b10 	.word	0x08005b10

08005830 <memcpy>:
 8005830:	440a      	add	r2, r1
 8005832:	4291      	cmp	r1, r2
 8005834:	f100 33ff 	add.w	r3, r0, #4294967295
 8005838:	d100      	bne.n	800583c <memcpy+0xc>
 800583a:	4770      	bx	lr
 800583c:	b510      	push	{r4, lr}
 800583e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005842:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005846:	4291      	cmp	r1, r2
 8005848:	d1f9      	bne.n	800583e <memcpy+0xe>
 800584a:	bd10      	pop	{r4, pc}

0800584c <_init>:
 800584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584e:	bf00      	nop
 8005850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005852:	bc08      	pop	{r3}
 8005854:	469e      	mov	lr, r3
 8005856:	4770      	bx	lr

08005858 <_fini>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	bf00      	nop
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr
